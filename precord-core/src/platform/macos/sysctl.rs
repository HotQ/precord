/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 120300;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const FD_SETSIZE: u32 = 1024;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const TIME_UTC: u32 = 1;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const NBBY: u32 = 8;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 1048576;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 131072;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const NMBCLUSTERS: u32 = 512;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 131072;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const AUDIT_RECORD_MAGIC: u32 = 2190085915;
pub const MAX_AUDIT_RECORDS: u32 = 20;
pub const MAXAUDITDATA: u32 = 32767;
pub const MAX_AUDIT_RECORD_SIZE: u32 = 32767;
pub const MIN_AUDIT_FILE_SIZE: u32 = 524288;
pub const AUDIT_HARD_LIMIT_FREE_BLOCKS: u32 = 4;
pub const AUDIT_TRIGGER_MIN: u32 = 1;
pub const AUDIT_TRIGGER_LOW_SPACE: u32 = 1;
pub const AUDIT_TRIGGER_ROTATE_KERNEL: u32 = 2;
pub const AUDIT_TRIGGER_READ_FILE: u32 = 3;
pub const AUDIT_TRIGGER_CLOSE_AND_DIE: u32 = 4;
pub const AUDIT_TRIGGER_NO_SPACE: u32 = 5;
pub const AUDIT_TRIGGER_ROTATE_USER: u32 = 6;
pub const AUDIT_TRIGGER_INITIALIZE: u32 = 7;
pub const AUDIT_TRIGGER_EXPIRE_TRAILS: u32 = 8;
pub const AUDIT_TRIGGER_MAX: u32 = 8;
pub const AUDITDEV_FILENAME: &[u8; 6usize] = b"audit\0";
pub const AUDIT_TRIGGER_FILE: &[u8; 11usize] = b"/dev/audit\0";
pub const AU_DEFAUDITSID: u32 = 0;
pub const AU_ASSIGN_ASID: i32 = -1;
pub const AUC_UNSET: u32 = 0;
pub const AUC_AUDITING: u32 = 1;
pub const AUC_NOAUDIT: u32 = 2;
pub const AUC_DISABLED: i32 = -1;
pub const A_OLDGETPOLICY: u32 = 2;
pub const A_OLDSETPOLICY: u32 = 3;
pub const A_GETKMASK: u32 = 4;
pub const A_SETKMASK: u32 = 5;
pub const A_OLDGETQCTRL: u32 = 6;
pub const A_OLDSETQCTRL: u32 = 7;
pub const A_GETCWD: u32 = 8;
pub const A_GETCAR: u32 = 9;
pub const A_GETSTAT: u32 = 12;
pub const A_SETSTAT: u32 = 13;
pub const A_SETUMASK: u32 = 14;
pub const A_SETSMASK: u32 = 15;
pub const A_OLDGETCOND: u32 = 20;
pub const A_OLDSETCOND: u32 = 21;
pub const A_GETCLASS: u32 = 22;
pub const A_SETCLASS: u32 = 23;
pub const A_GETPINFO: u32 = 24;
pub const A_SETPMASK: u32 = 25;
pub const A_SETFSIZE: u32 = 26;
pub const A_GETFSIZE: u32 = 27;
pub const A_GETPINFO_ADDR: u32 = 28;
pub const A_GETKAUDIT: u32 = 29;
pub const A_SETKAUDIT: u32 = 30;
pub const A_SENDTRIGGER: u32 = 31;
pub const A_GETSINFO_ADDR: u32 = 32;
pub const A_GETPOLICY: u32 = 33;
pub const A_SETPOLICY: u32 = 34;
pub const A_GETQCTRL: u32 = 35;
pub const A_SETQCTRL: u32 = 36;
pub const A_GETCOND: u32 = 37;
pub const A_SETCOND: u32 = 38;
pub const A_GETSFLAGS: u32 = 39;
pub const A_SETSFLAGS: u32 = 40;
pub const A_GETCTLMODE: u32 = 41;
pub const A_SETCTLMODE: u32 = 42;
pub const A_GETEXPAFTER: u32 = 43;
pub const A_SETEXPAFTER: u32 = 44;
pub const AUDIT_CNT: u32 = 1;
pub const AUDIT_AHLT: u32 = 2;
pub const AUDIT_ARGV: u32 = 4;
pub const AUDIT_ARGE: u32 = 8;
pub const AUDIT_SEQ: u32 = 16;
pub const AUDIT_WINDATA: u32 = 32;
pub const AUDIT_USER: u32 = 64;
pub const AUDIT_GROUP: u32 = 128;
pub const AUDIT_TRAIL: u32 = 256;
pub const AUDIT_PATH: u32 = 512;
pub const AUDIT_SCNT: u32 = 1024;
pub const AUDIT_PUBLIC: u32 = 2048;
pub const AUDIT_ZONENAME: u32 = 4096;
pub const AUDIT_PERZONE: u32 = 8192;
pub const AQ_HIWATER: u32 = 100;
pub const AQ_MAXHIGH: u32 = 10000;
pub const AQ_LOWATER: u32 = 10;
pub const AQ_BUFSZ: u32 = 32767;
pub const AQ_MAXBUFSZ: u32 = 1048576;
pub const AU_FS_MINFREE: u32 = 20;
pub const AU_IPv4: u32 = 4;
pub const AU_IPv6: u32 = 16;
pub const AU_CLASS_MASK_RESERVED: u32 = 268435456;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const CRF_NOMEMBERD: u32 = 1;
pub const CRF_MAC_ENFORCE: u32 = 2;
pub const XUCRED_VERSION: u32 = 0;
pub const EVFILT_READ: i32 = -1;
pub const EVFILT_WRITE: i32 = -2;
pub const EVFILT_AIO: i32 = -3;
pub const EVFILT_VNODE: i32 = -4;
pub const EVFILT_PROC: i32 = -5;
pub const EVFILT_SIGNAL: i32 = -6;
pub const EVFILT_TIMER: i32 = -7;
pub const EVFILT_MACHPORT: i32 = -8;
pub const EVFILT_FS: i32 = -9;
pub const EVFILT_USER: i32 = -10;
pub const EVFILT_VM: i32 = -12;
pub const EVFILT_EXCEPT: i32 = -15;
pub const EVFILT_SYSCOUNT: u32 = 17;
pub const EVFILT_THREADMARKER: u32 = 17;
pub const KEVENT_FLAG_NONE: u32 = 0;
pub const KEVENT_FLAG_IMMEDIATE: u32 = 1;
pub const KEVENT_FLAG_ERROR_EVENTS: u32 = 2;
pub const EV_ADD: u32 = 1;
pub const EV_DELETE: u32 = 2;
pub const EV_ENABLE: u32 = 4;
pub const EV_DISABLE: u32 = 8;
pub const EV_ONESHOT: u32 = 16;
pub const EV_CLEAR: u32 = 32;
pub const EV_RECEIPT: u32 = 64;
pub const EV_DISPATCH: u32 = 128;
pub const EV_UDATA_SPECIFIC: u32 = 256;
pub const EV_DISPATCH2: u32 = 384;
pub const EV_VANISHED: u32 = 512;
pub const EV_SYSFLAGS: u32 = 61440;
pub const EV_FLAG0: u32 = 4096;
pub const EV_FLAG1: u32 = 8192;
pub const EV_EOF: u32 = 32768;
pub const EV_ERROR: u32 = 16384;
pub const EV_POLL: u32 = 4096;
pub const EV_OOBAND: u32 = 8192;
pub const NOTE_TRIGGER: u32 = 16777216;
pub const NOTE_FFNOP: u32 = 0;
pub const NOTE_FFAND: u32 = 1073741824;
pub const NOTE_FFOR: u32 = 2147483648;
pub const NOTE_FFCOPY: u32 = 3221225472;
pub const NOTE_FFCTRLMASK: u32 = 3221225472;
pub const NOTE_FFLAGSMASK: u32 = 16777215;
pub const NOTE_LOWAT: u32 = 1;
pub const NOTE_OOB: u32 = 2;
pub const NOTE_DELETE: u32 = 1;
pub const NOTE_WRITE: u32 = 2;
pub const NOTE_EXTEND: u32 = 4;
pub const NOTE_ATTRIB: u32 = 8;
pub const NOTE_LINK: u32 = 16;
pub const NOTE_RENAME: u32 = 32;
pub const NOTE_REVOKE: u32 = 64;
pub const NOTE_NONE: u32 = 128;
pub const NOTE_FUNLOCK: u32 = 256;
pub const NOTE_EXIT: u32 = 2147483648;
pub const NOTE_FORK: u32 = 1073741824;
pub const NOTE_EXEC: u32 = 536870912;
pub const NOTE_SIGNAL: u32 = 134217728;
pub const NOTE_EXITSTATUS: u32 = 67108864;
pub const NOTE_EXIT_DETAIL: u32 = 33554432;
pub const NOTE_PDATAMASK: u32 = 1048575;
pub const NOTE_PCTRLMASK: i32 = -1048576;
pub const NOTE_EXIT_DETAIL_MASK: u32 = 458752;
pub const NOTE_EXIT_DECRYPTFAIL: u32 = 65536;
pub const NOTE_EXIT_MEMORY: u32 = 131072;
pub const NOTE_EXIT_CSERROR: u32 = 262144;
pub const NOTE_VM_PRESSURE: u32 = 2147483648;
pub const NOTE_VM_PRESSURE_TERMINATE: u32 = 1073741824;
pub const NOTE_VM_PRESSURE_SUDDEN_TERMINATE: u32 = 536870912;
pub const NOTE_VM_ERROR: u32 = 268435456;
pub const NOTE_SECONDS: u32 = 1;
pub const NOTE_USECONDS: u32 = 2;
pub const NOTE_NSECONDS: u32 = 4;
pub const NOTE_ABSOLUTE: u32 = 8;
pub const NOTE_LEEWAY: u32 = 16;
pub const NOTE_CRITICAL: u32 = 32;
pub const NOTE_BACKGROUND: u32 = 64;
pub const NOTE_MACH_CONTINUOUS_TIME: u32 = 128;
pub const NOTE_MACHTIME: u32 = 256;
pub const NOTE_TRACK: u32 = 1;
pub const NOTE_TRACKERR: u32 = 2;
pub const NOTE_CHILD: u32 = 4;
pub const SIDL: u32 = 1;
pub const SRUN: u32 = 2;
pub const SSLEEP: u32 = 3;
pub const SSTOP: u32 = 4;
pub const SZOMB: u32 = 5;
pub const P_ADVLOCK: u32 = 1;
pub const P_CONTROLT: u32 = 2;
pub const P_LP64: u32 = 4;
pub const P_NOCLDSTOP: u32 = 8;
pub const P_PPWAIT: u32 = 16;
pub const P_PROFIL: u32 = 32;
pub const P_SELECT: u32 = 64;
pub const P_CONTINUED: u32 = 128;
pub const P_SUGID: u32 = 256;
pub const P_SYSTEM: u32 = 512;
pub const P_TIMEOUT: u32 = 1024;
pub const P_TRACED: u32 = 2048;
pub const P_DISABLE_ASLR: u32 = 4096;
pub const P_WEXIT: u32 = 8192;
pub const P_EXEC: u32 = 16384;
pub const P_OWEUPC: u32 = 32768;
pub const P_AFFINITY: u32 = 65536;
pub const P_TRANSLATED: u32 = 131072;
pub const P_CLASSIC: u32 = 131072;
pub const P_DELAYIDLESLEEP: u32 = 262144;
pub const P_CHECKOPENEVT: u32 = 524288;
pub const P_DEPENDENCY_CAPABLE: u32 = 1048576;
pub const P_REBOOT: u32 = 2097152;
pub const P_RESV6: u32 = 4194304;
pub const P_RESV7: u32 = 8388608;
pub const P_THCWD: u32 = 16777216;
pub const P_RESV9: u32 = 33554432;
pub const P_ADOPTPERSONA: u32 = 67108864;
pub const P_RESV11: u32 = 134217728;
pub const P_NOSHLIB: u32 = 268435456;
pub const P_FORCEQUOTA: u32 = 536870912;
pub const P_NOCLDWAIT: u32 = 1073741824;
pub const P_NOREMOTEHANG: u32 = 2147483648;
pub const P_INMEM: u32 = 0;
pub const P_NOSWAP: u32 = 0;
pub const P_PHYSIO: u32 = 0;
pub const P_FSTRACE: u32 = 0;
pub const P_SSTEP: u32 = 0;
pub const P_DIRTY_TRACK: u32 = 1;
pub const P_DIRTY_ALLOW_IDLE_EXIT: u32 = 2;
pub const P_DIRTY_DEFER: u32 = 4;
pub const P_DIRTY: u32 = 8;
pub const P_DIRTY_SHUTDOWN: u32 = 16;
pub const P_DIRTY_TERMINATED: u32 = 32;
pub const P_DIRTY_BUSY: u32 = 64;
pub const P_DIRTY_MARKED: u32 = 128;
pub const P_DIRTY_AGING_IN_PROGRESS: u32 = 256;
pub const P_DIRTY_LAUNCH_IN_PROGRESS: u32 = 512;
pub const P_DIRTY_DEFER_ALWAYS: u32 = 1024;
pub const P_DIRTY_IS_DIRTY: u32 = 24;
pub const P_DIRTY_IDLE_EXIT_ENABLED: u32 = 3;
pub const CTL_MAXNAME: u32 = 12;
pub const CTLTYPE: u32 = 15;
pub const CTLTYPE_NODE: u32 = 1;
pub const CTLTYPE_INT: u32 = 2;
pub const CTLTYPE_STRING: u32 = 3;
pub const CTLTYPE_QUAD: u32 = 4;
pub const CTLTYPE_OPAQUE: u32 = 5;
pub const CTLTYPE_STRUCT: u32 = 5;
pub const CTLFLAG_RD: u32 = 2147483648;
pub const CTLFLAG_WR: u32 = 1073741824;
pub const CTLFLAG_RW: u32 = 3221225472;
pub const CTLFLAG_NOLOCK: u32 = 536870912;
pub const CTLFLAG_ANYBODY: u32 = 268435456;
pub const CTLFLAG_SECURE: u32 = 134217728;
pub const CTLFLAG_MASKED: u32 = 67108864;
pub const CTLFLAG_NOAUTO: u32 = 33554432;
pub const CTLFLAG_KERN: u32 = 16777216;
pub const CTLFLAG_LOCKED: u32 = 8388608;
pub const CTLFLAG_OID2: u32 = 4194304;
pub const CTLFLAG_EXPERIMENT: u32 = 1048576;
pub const OID_AUTO: i32 = -1;
pub const OID_AUTO_START: u32 = 100;
pub const CTL_UNSPEC: u32 = 0;
pub const CTL_KERN: u32 = 1;
pub const CTL_VM: u32 = 2;
pub const CTL_VFS: u32 = 3;
pub const CTL_NET: u32 = 4;
pub const CTL_DEBUG: u32 = 5;
pub const CTL_HW: u32 = 6;
pub const CTL_MACHDEP: u32 = 7;
pub const CTL_USER: u32 = 8;
pub const CTL_MAXID: u32 = 9;
pub const KERN_OSTYPE: u32 = 1;
pub const KERN_OSRELEASE: u32 = 2;
pub const KERN_OSREV: u32 = 3;
pub const KERN_VERSION: u32 = 4;
pub const KERN_MAXVNODES: u32 = 5;
pub const KERN_MAXPROC: u32 = 6;
pub const KERN_MAXFILES: u32 = 7;
pub const KERN_ARGMAX: u32 = 8;
pub const KERN_SECURELVL: u32 = 9;
pub const KERN_HOSTNAME: u32 = 10;
pub const KERN_HOSTID: u32 = 11;
pub const KERN_CLOCKRATE: u32 = 12;
pub const KERN_VNODE: u32 = 13;
pub const KERN_PROC: u32 = 14;
pub const KERN_FILE: u32 = 15;
pub const KERN_PROF: u32 = 16;
pub const KERN_POSIX1: u32 = 17;
pub const KERN_NGROUPS: u32 = 18;
pub const KERN_JOB_CONTROL: u32 = 19;
pub const KERN_SAVED_IDS: u32 = 20;
pub const KERN_BOOTTIME: u32 = 21;
pub const KERN_NISDOMAINNAME: u32 = 22;
pub const KERN_DOMAINNAME: u32 = 22;
pub const KERN_MAXPARTITIONS: u32 = 23;
pub const KERN_KDEBUG: u32 = 24;
pub const KERN_UPDATEINTERVAL: u32 = 25;
pub const KERN_OSRELDATE: u32 = 26;
pub const KERN_NTP_PLL: u32 = 27;
pub const KERN_BOOTFILE: u32 = 28;
pub const KERN_MAXFILESPERPROC: u32 = 29;
pub const KERN_MAXPROCPERUID: u32 = 30;
pub const KERN_DUMPDEV: u32 = 31;
pub const KERN_IPC: u32 = 32;
pub const KERN_DUMMY: u32 = 33;
pub const KERN_PS_STRINGS: u32 = 34;
pub const KERN_USRSTACK32: u32 = 35;
pub const KERN_LOGSIGEXIT: u32 = 36;
pub const KERN_SYMFILE: u32 = 37;
pub const KERN_PROCARGS: u32 = 38;
pub const KERN_NETBOOT: u32 = 40;
pub const KERN_SYSV: u32 = 42;
pub const KERN_AFFINITY: u32 = 43;
pub const KERN_TRANSLATE: u32 = 44;
pub const KERN_CLASSIC: u32 = 44;
pub const KERN_EXEC: u32 = 45;
pub const KERN_CLASSICHANDLER: u32 = 45;
pub const KERN_AIOMAX: u32 = 46;
pub const KERN_AIOPROCMAX: u32 = 47;
pub const KERN_AIOTHREADS: u32 = 48;
pub const KERN_PROCARGS2: u32 = 49;
pub const KERN_COREFILE: u32 = 50;
pub const KERN_COREDUMP: u32 = 51;
pub const KERN_SUGID_COREDUMP: u32 = 52;
pub const KERN_PROCDELAYTERM: u32 = 53;
pub const KERN_SHREG_PRIVATIZABLE: u32 = 54;
pub const KERN_LOW_PRI_WINDOW: u32 = 56;
pub const KERN_LOW_PRI_DELAY: u32 = 57;
pub const KERN_POSIX: u32 = 58;
pub const KERN_USRSTACK64: u32 = 59;
pub const KERN_NX_PROTECTION: u32 = 60;
pub const KERN_TFP: u32 = 61;
pub const KERN_PROCNAME: u32 = 62;
pub const KERN_THALTSTACK: u32 = 63;
pub const KERN_SPECULATIVE_READS: u32 = 64;
pub const KERN_OSVERSION: u32 = 65;
pub const KERN_SAFEBOOT: u32 = 66;
pub const KERN_RAGEVNODE: u32 = 68;
pub const KERN_TTY: u32 = 69;
pub const KERN_CHECKOPENEVT: u32 = 70;
pub const KERN_THREADNAME: u32 = 71;
pub const KERN_MAXID: u32 = 72;
pub const KERN_USRSTACK: u32 = 59;
pub const KERN_RAGE_PROC: u32 = 1;
pub const KERN_RAGE_THREAD: u32 = 2;
pub const KERN_UNRAGE_PROC: u32 = 3;
pub const KERN_UNRAGE_THREAD: u32 = 4;
pub const KERN_OPENEVT_PROC: u32 = 1;
pub const KERN_UNOPENEVT_PROC: u32 = 2;
pub const KERN_TFP_POLICY: u32 = 1;
pub const KERN_TFP_POLICY_DENY: u32 = 0;
pub const KERN_TFP_POLICY_DEFAULT: u32 = 2;
pub const KERN_KDEFLAGS: u32 = 1;
pub const KERN_KDDFLAGS: u32 = 2;
pub const KERN_KDENABLE: u32 = 3;
pub const KERN_KDSETBUF: u32 = 4;
pub const KERN_KDGETBUF: u32 = 5;
pub const KERN_KDSETUP: u32 = 6;
pub const KERN_KDREMOVE: u32 = 7;
pub const KERN_KDSETREG: u32 = 8;
pub const KERN_KDGETREG: u32 = 9;
pub const KERN_KDREADTR: u32 = 10;
pub const KERN_KDPIDTR: u32 = 11;
pub const KERN_KDTHRMAP: u32 = 12;
pub const KERN_KDPIDEX: u32 = 14;
pub const KERN_KDSETRTCDEC: u32 = 15;
pub const KERN_KDGETENTROPY: u32 = 16;
pub const KERN_KDWRITETR: u32 = 17;
pub const KERN_KDWRITEMAP: u32 = 18;
pub const KERN_KDTEST: u32 = 19;
pub const KERN_KDREADCURTHRMAP: u32 = 21;
pub const KERN_KDSET_TYPEFILTER: u32 = 22;
pub const KERN_KDBUFWAIT: u32 = 23;
pub const KERN_KDCPUMAP: u32 = 24;
pub const KERN_KDWRITEMAP_V3: u32 = 27;
pub const KERN_KDWRITETR_V3: u32 = 28;
pub const KERN_PROC_ALL: u32 = 0;
pub const KERN_PROC_PID: u32 = 1;
pub const KERN_PROC_PGRP: u32 = 2;
pub const KERN_PROC_SESSION: u32 = 3;
pub const KERN_PROC_TTY: u32 = 4;
pub const KERN_PROC_UID: u32 = 5;
pub const KERN_PROC_RUID: u32 = 6;
pub const KERN_PROC_LCID: u32 = 7;
pub const KERN_VFSNSPACE_HANDLE_PROC: u32 = 1;
pub const KERN_VFSNSPACE_UNHANDLE_PROC: u32 = 2;
pub const WMESGLEN: u32 = 7;
pub const EPROC_CTTY: u32 = 1;
pub const EPROC_SLEADER: u32 = 2;
pub const COMAPT_MAXLOGNAME: u32 = 12;
pub const KIPC_MAXSOCKBUF: u32 = 1;
pub const KIPC_SOCKBUF_WASTE: u32 = 2;
pub const KIPC_SOMAXCONN: u32 = 3;
pub const KIPC_MAX_LINKHDR: u32 = 4;
pub const KIPC_MAX_PROTOHDR: u32 = 5;
pub const KIPC_MAX_HDR: u32 = 6;
pub const KIPC_MAX_DATALEN: u32 = 7;
pub const KIPC_MBSTAT: u32 = 8;
pub const KIPC_NMBCLUSTERS: u32 = 9;
pub const KIPC_SOQLIMITCOMPAT: u32 = 10;
pub const VM_METER: u32 = 1;
pub const VM_LOADAVG: u32 = 2;
pub const VM_MACHFACTOR: u32 = 4;
pub const VM_SWAPUSAGE: u32 = 5;
pub const VM_MAXID: u32 = 6;
pub const LSCALE: u32 = 1000;
pub const HW_MACHINE: u32 = 1;
pub const HW_MODEL: u32 = 2;
pub const HW_NCPU: u32 = 3;
pub const HW_BYTEORDER: u32 = 4;
pub const HW_PHYSMEM: u32 = 5;
pub const HW_USERMEM: u32 = 6;
pub const HW_PAGESIZE: u32 = 7;
pub const HW_DISKNAMES: u32 = 8;
pub const HW_DISKSTATS: u32 = 9;
pub const HW_EPOCH: u32 = 10;
pub const HW_FLOATINGPT: u32 = 11;
pub const HW_MACHINE_ARCH: u32 = 12;
pub const HW_VECTORUNIT: u32 = 13;
pub const HW_BUS_FREQ: u32 = 14;
pub const HW_CPU_FREQ: u32 = 15;
pub const HW_CACHELINE: u32 = 16;
pub const HW_L1ICACHESIZE: u32 = 17;
pub const HW_L1DCACHESIZE: u32 = 18;
pub const HW_L2SETTINGS: u32 = 19;
pub const HW_L2CACHESIZE: u32 = 20;
pub const HW_L3SETTINGS: u32 = 21;
pub const HW_L3CACHESIZE: u32 = 22;
pub const HW_TB_FREQ: u32 = 23;
pub const HW_MEMSIZE: u32 = 24;
pub const HW_AVAILCPU: u32 = 25;
pub const HW_TARGET: u32 = 26;
pub const HW_PRODUCT: u32 = 27;
pub const HW_MAXID: u32 = 28;
pub const USER_CS_PATH: u32 = 1;
pub const USER_BC_BASE_MAX: u32 = 2;
pub const USER_BC_DIM_MAX: u32 = 3;
pub const USER_BC_SCALE_MAX: u32 = 4;
pub const USER_BC_STRING_MAX: u32 = 5;
pub const USER_COLL_WEIGHTS_MAX: u32 = 6;
pub const USER_EXPR_NEST_MAX: u32 = 7;
pub const USER_LINE_MAX: u32 = 8;
pub const USER_RE_DUP_MAX: u32 = 9;
pub const USER_POSIX2_VERSION: u32 = 10;
pub const USER_POSIX2_C_BIND: u32 = 11;
pub const USER_POSIX2_C_DEV: u32 = 12;
pub const USER_POSIX2_CHAR_TERM: u32 = 13;
pub const USER_POSIX2_FORT_DEV: u32 = 14;
pub const USER_POSIX2_FORT_RUN: u32 = 15;
pub const USER_POSIX2_LOCALEDEF: u32 = 16;
pub const USER_POSIX2_SW_DEV: u32 = 17;
pub const USER_POSIX2_UPE: u32 = 18;
pub const USER_STREAM_MAX: u32 = 19;
pub const USER_TZNAME_MAX: u32 = 20;
pub const USER_MAXID: u32 = 21;
pub const CTL_DEBUG_NAME: u32 = 0;
pub const CTL_DEBUG_VALUE: u32 = 1;
pub const CTL_DEBUG_MAXID: u32 = 20;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    fn test_field___mbstate8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__mbstate8)
            )
        );
    }
    test_field___mbstate8();
    fn test_field__mbstateL() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(_mbstateL)
            )
        );
    }
    test_field__mbstateL();
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    fn test_field___routine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__routine)
            )
        );
    }
    test_field___routine();
    fn test_field___arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__arg)
            )
        );
    }
    test_field___arg();
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_attr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_attr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_cond_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_cond_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_condattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_condattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutex_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutex_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutexattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutexattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_once_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_once_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_once_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_once_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlock_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlock_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlockattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlockattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___cleanup_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__cleanup_stack)
            )
        );
    }
    test_field___cleanup_stack();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    fn test_field_fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    test_field_fds_bits();
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_nsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    test_field_tv_nsec();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_usec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    test_field_tv_usec();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[test]
fn bindgen_test_layout_timeval64() {
    assert_eq!(
        ::std::mem::size_of::<timeval64>(),
        16usize,
        concat!("Size of: ", stringify!(timeval64))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval64>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval64))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval64),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_usec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval64),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    test_field_tv_usec();
}
pub type time_t = __darwin_time_t;
pub type suseconds_t = __darwin_suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    fn test_field_it_interval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<itimerval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerval),
                "::",
                stringify!(it_interval)
            )
        );
    }
    test_field_it_interval();
    fn test_field_it_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<itimerval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(itimerval),
                "::",
                stringify!(it_value)
            )
        );
    }
    test_field_it_value();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    fn test_field_tz_minuteswest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timezone>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timezone),
                "::",
                stringify!(tz_minuteswest)
            )
        );
    }
    test_field_tz_minuteswest();
    fn test_field_tz_dsttime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timezone>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(timezone),
                "::",
                stringify!(tz_dsttime)
            )
        );
    }
    test_field_tz_dsttime();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_clockinfo() {
    assert_eq!(
        ::std::mem::size_of::<clockinfo>(),
        20usize,
        concat!("Size of: ", stringify!(clockinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<clockinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(clockinfo))
    );
    fn test_field_hz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<clockinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hz) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(clockinfo),
                "::",
                stringify!(hz)
            )
        );
    }
    test_field_hz();
    fn test_field_tick() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<clockinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(clockinfo),
                "::",
                stringify!(tick)
            )
        );
    }
    test_field_tick();
    fn test_field_tickadj() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<clockinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tickadj) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(clockinfo),
                "::",
                stringify!(tickadj)
            )
        );
    }
    test_field_tickadj();
    fn test_field_stathz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<clockinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stathz) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(clockinfo),
                "::",
                stringify!(stathz)
            )
        );
    }
    test_field_stathz();
    fn test_field_profhz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<clockinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).profhz) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(clockinfo),
                "::",
                stringify!(profhz)
            )
        );
    }
    test_field_profhz();
}
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = __darwin_size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    fn test_field_tm_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_sec)
            )
        );
    }
    test_field_tm_sec();
    fn test_field_tm_min() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_min)
            )
        );
    }
    test_field_tm_min();
    fn test_field_tm_hour() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_hour)
            )
        );
    }
    test_field_tm_hour();
    fn test_field_tm_mday() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mday)
            )
        );
    }
    test_field_tm_mday();
    fn test_field_tm_mon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_mon)
            )
        );
    }
    test_field_tm_mon();
    fn test_field_tm_year() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_year)
            )
        );
    }
    test_field_tm_year();
    fn test_field_tm_wday() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_wday)
            )
        );
    }
    test_field_tm_wday();
    fn test_field_tm_yday() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_yday)
            )
        );
    }
    test_field_tm_yday();
    fn test_field_tm_isdst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_isdst)
            )
        );
    }
    test_field_tm_isdst();
    fn test_field_tm_gmtoff() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_gmtoff)
            )
        );
    }
    test_field_tm_gmtoff();
    fn test_field_tm_zone() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tm>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tm),
                "::",
                stringify!(tm_zone)
            )
        );
    }
    test_field_tm_zone();
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select$1050"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type ssize_t = __darwin_ssize_t;
pub type useconds_t = __darwin_useconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    fn test_field___eax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eax)
            )
        );
    }
    test_field___eax();
    fn test_field___ebx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ebx) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ebx)
            )
        );
    }
    test_field___ebx();
    fn test_field___ecx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ecx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ecx)
            )
        );
    }
    test_field___ecx();
    fn test_field___edx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__edx) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__edx)
            )
        );
    }
    test_field___edx();
    fn test_field___edi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__edi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__edi)
            )
        );
    }
    test_field___edi();
    fn test_field___esi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__esi) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__esi)
            )
        );
    }
    test_field___esi();
    fn test_field___ebp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ebp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ebp)
            )
        );
    }
    test_field___ebp();
    fn test_field___esp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__esp) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__esp)
            )
        );
    }
    test_field___esp();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___eflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eflags) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eflags)
            )
        );
    }
    test_field___eflags();
    fn test_field___eip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__eip) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__eip)
            )
        );
    }
    test_field___eip();
    fn test_field___cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__cs)
            )
        );
    }
    test_field___cs();
    fn test_field___ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__ds)
            )
        );
    }
    test_field___ds();
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
    fn test_field___gs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_thread_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_thread_state),
                "::",
                stringify!(__gs)
            )
        );
    }
    test_field___gs();
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    fn test_field___mmst_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mmst_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mmst_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mmst_reg),
                "::",
                stringify!(__mmst_reg)
            )
        );
    }
    test_field___mmst_reg();
    fn test_field___mmst_rsrv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mmst_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mmst_rsrv) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mmst_reg),
                "::",
                stringify!(__mmst_rsrv)
            )
        );
    }
    test_field___mmst_rsrv();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    fn test_field___xmm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_xmm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__xmm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_xmm_reg),
                "::",
                stringify!(__xmm_reg)
            )
        );
    }
    test_field___xmm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    fn test_field___ymm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ymm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ymm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ymm_reg),
                "::",
                stringify!(__ymm_reg)
            )
        );
    }
    test_field___ymm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    fn test_field___zmm_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_zmm_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__zmm_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_zmm_reg),
                "::",
                stringify!(__zmm_reg)
            )
        );
    }
    test_field___zmm_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    fn test_field___opmask_reg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_opmask_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opmask_reg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_opmask_reg),
                "::",
                stringify!(__opmask_reg)
            )
        );
    }
    test_field___opmask_reg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_float_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_float_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx_state),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_k0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k0)
            )
        );
    }
    test_field___fpu_k0();
    fn test_field___fpu_k1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize
            },
            724usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k1)
            )
        );
    }
    test_field___fpu_k1();
    fn test_field___fpu_k2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k2)
            )
        );
    }
    test_field___fpu_k2();
    fn test_field___fpu_k3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize
            },
            740usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k3)
            )
        );
    }
    test_field___fpu_k3();
    fn test_field___fpu_k4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k4)
            )
        );
    }
    test_field___fpu_k4();
    fn test_field___fpu_k5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize
            },
            756usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k5)
            )
        );
    }
    test_field___fpu_k5();
    fn test_field___fpu_k6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k6)
            )
        );
    }
    test_field___fpu_k6();
    fn test_field___fpu_k7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize
            },
            772usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_k7)
            )
        );
    }
    test_field___fpu_k7();
    fn test_field___fpu_zmmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh0)
            )
        );
    }
    test_field___fpu_zmmh0();
    fn test_field___fpu_zmmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh1)
            )
        );
    }
    test_field___fpu_zmmh1();
    fn test_field___fpu_zmmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize
            },
            844usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh2)
            )
        );
    }
    test_field___fpu_zmmh2();
    fn test_field___fpu_zmmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize
            },
            876usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh3)
            )
        );
    }
    test_field___fpu_zmmh3();
    fn test_field___fpu_zmmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize
            },
            908usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh4)
            )
        );
    }
    test_field___fpu_zmmh4();
    fn test_field___fpu_zmmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize
            },
            940usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh5)
            )
        );
    }
    test_field___fpu_zmmh5();
    fn test_field___fpu_zmmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize
            },
            972usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh6)
            )
        );
    }
    test_field___fpu_zmmh6();
    fn test_field___fpu_zmmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_avx512_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize
            },
            1004usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_avx512_state),
                "::",
                stringify!(__fpu_zmmh7)
            )
        );
    }
    test_field___fpu_zmmh7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    fn test_field___trapno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__trapno)
            )
        );
    }
    test_field___trapno();
    fn test_field___cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__cpu)
            )
        );
    }
    test_field___cpu();
    fn test_field___err() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__err)
            )
        );
    }
    test_field___err();
    fn test_field___faultvaddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_i386_exception_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_i386_exception_state),
                "::",
                stringify!(__faultvaddr)
            )
        );
    }
    test_field___faultvaddr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    fn test_field___dr0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr0)
            )
        );
    }
    test_field___dr0();
    fn test_field___dr1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr1)
            )
        );
    }
    test_field___dr1();
    fn test_field___dr2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr2)
            )
        );
    }
    test_field___dr2();
    fn test_field___dr3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr3)
            )
        );
    }
    test_field___dr3();
    fn test_field___dr4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr4)
            )
        );
    }
    test_field___dr4();
    fn test_field___dr5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr5)
            )
        );
    }
    test_field___dr5();
    fn test_field___dr6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr6)
            )
        );
    }
    test_field___dr6();
    fn test_field___dr7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state32),
                "::",
                stringify!(__dr7)
            )
        );
    }
    test_field___dr7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout___x86_instruction_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_instruction_state>(),
        2456usize,
        concat!("Size of: ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_instruction_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_instruction_state))
    );
    fn test_field___insn_stream_valid_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_stream_valid_bytes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_stream_valid_bytes)
            )
        );
    }
    test_field___insn_stream_valid_bytes();
    fn test_field___insn_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_offset)
            )
        );
    }
    test_field___insn_offset();
    fn test_field___out_of_synch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__out_of_synch) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__out_of_synch)
            )
        );
    }
    test_field___out_of_synch();
    fn test_field___insn_bytes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_bytes) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_bytes)
            )
        );
    }
    test_field___insn_bytes();
    fn test_field___insn_cacheline() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_instruction_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__insn_cacheline) as usize - ptr as usize
            },
            2392usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_instruction_state),
                "::",
                stringify!(__insn_cacheline)
            )
        );
    }
    test_field___insn_cacheline();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___last_branch_record() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_record>(),
        24usize,
        concat!("Size of: ", stringify!(__last_branch_record))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_record>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_record))
    );
    fn test_field___from_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_record>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__from_ip) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_record),
                "::",
                stringify!(__from_ip)
            )
        );
    }
    test_field___from_ip();
    fn test_field___to_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_record>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__to_ip) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_record),
                "::",
                stringify!(__to_ip)
            )
        );
    }
    test_field___to_ip();
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[test]
fn bindgen_test_layout___last_branch_state() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_state>(),
        776usize,
        concat!("Size of: ", stringify!(__last_branch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_state))
    );
    fn test_field___lbr_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lbr_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_state),
                "::",
                stringify!(__lbr_count)
            )
        );
    }
    test_field___lbr_count();
    fn test_field___lbrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__last_branch_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lbrs) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__last_branch_state),
                "::",
                stringify!(__lbrs)
            )
        );
    }
    test_field___lbrs();
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    fn test_field___pagein_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__x86_pagein_state>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__x86_pagein_state),
                "::",
                stringify!(__pagein_error)
            )
        );
    }
    test_field___pagein_error();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    fn test_field___rax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rax)
            )
        );
    }
    test_field___rax();
    fn test_field___rbx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rbx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rbx)
            )
        );
    }
    test_field___rbx();
    fn test_field___rcx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rcx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rcx)
            )
        );
    }
    test_field___rcx();
    fn test_field___rdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rdx) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rdx)
            )
        );
    }
    test_field___rdx();
    fn test_field___rdi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rdi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rdi)
            )
        );
    }
    test_field___rdi();
    fn test_field___rsi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rsi) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rsi)
            )
        );
    }
    test_field___rsi();
    fn test_field___rbp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rbp) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rbp)
            )
        );
    }
    test_field___rbp();
    fn test_field___rsp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rsp) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rsp)
            )
        );
    }
    test_field___rsp();
    fn test_field___r8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r8)
            )
        );
    }
    test_field___r8();
    fn test_field___r9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r9)
            )
        );
    }
    test_field___r9();
    fn test_field___r10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r10) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r10)
            )
        );
    }
    test_field___r10();
    fn test_field___r11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r11) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r11)
            )
        );
    }
    test_field___r11();
    fn test_field___r12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r12) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r12)
            )
        );
    }
    test_field___r12();
    fn test_field___r13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r13) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r13)
            )
        );
    }
    test_field___r13();
    fn test_field___r14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r14) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r14)
            )
        );
    }
    test_field___r14();
    fn test_field___r15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__r15) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__r15)
            )
        );
    }
    test_field___r15();
    fn test_field___rip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rip) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rip)
            )
        );
    }
    test_field___rip();
    fn test_field___rflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rflags) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__rflags)
            )
        );
    }
    test_field___rflags();
    fn test_field___cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__cs)
            )
        );
    }
    test_field___cs();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
    fn test_field___gs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_state64),
                "::",
                stringify!(__gs)
            )
        );
    }
    test_field___gs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    fn test_field___ss64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ss64)
            )
        );
    }
    test_field___ss64();
    fn test_field___ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ds)
            )
        );
    }
    test_field___ds();
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___gsbase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_thread_full_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__gsbase) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_thread_full_state64),
                "::",
                stringify!(__gsbase)
            )
        );
    }
    test_field___gsbase();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_float_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_float_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_ymmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh8)
            )
        );
    }
    test_field___fpu_ymmh8();
    fn test_field___fpu_ymmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh9)
            )
        );
    }
    test_field___fpu_ymmh9();
    fn test_field___fpu_ymmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh10)
            )
        );
    }
    test_field___fpu_ymmh10();
    fn test_field___fpu_ymmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh11)
            )
        );
    }
    test_field___fpu_ymmh11();
    fn test_field___fpu_ymmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh12)
            )
        );
    }
    test_field___fpu_ymmh12();
    fn test_field___fpu_ymmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize
            },
            796usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh13)
            )
        );
    }
    test_field___fpu_ymmh13();
    fn test_field___fpu_ymmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh14)
            )
        );
    }
    test_field___fpu_ymmh14();
    fn test_field___fpu_ymmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize
            },
            828usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx_state64),
                "::",
                stringify!(__fpu_ymmh15)
            )
        );
    }
    test_field___fpu_ymmh15();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    fn test_field___fpu_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_reserved)
            )
        );
    }
    test_field___fpu_reserved();
    fn test_field___fpu_fcw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fcw)
            )
        );
    }
    test_field___fpu_fcw();
    fn test_field___fpu_fsw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fsw)
            )
        );
    }
    test_field___fpu_fsw();
    fn test_field___fpu_ftw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ftw)
            )
        );
    }
    test_field___fpu_ftw();
    fn test_field___fpu_rsrv1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv1)
            )
        );
    }
    test_field___fpu_rsrv1();
    fn test_field___fpu_fop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_fop)
            )
        );
    }
    test_field___fpu_fop();
    fn test_field___fpu_ip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ip)
            )
        );
    }
    test_field___fpu_ip();
    fn test_field___fpu_cs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_cs)
            )
        );
    }
    test_field___fpu_cs();
    fn test_field___fpu_rsrv2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv2)
            )
        );
    }
    test_field___fpu_rsrv2();
    fn test_field___fpu_dp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_dp)
            )
        );
    }
    test_field___fpu_dp();
    fn test_field___fpu_ds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ds)
            )
        );
    }
    test_field___fpu_ds();
    fn test_field___fpu_rsrv3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv3)
            )
        );
    }
    test_field___fpu_rsrv3();
    fn test_field___fpu_mxcsr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_mxcsr)
            )
        );
    }
    test_field___fpu_mxcsr();
    fn test_field___fpu_mxcsrmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_mxcsrmask)
            )
        );
    }
    test_field___fpu_mxcsrmask();
    fn test_field___fpu_stmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm0)
            )
        );
    }
    test_field___fpu_stmm0();
    fn test_field___fpu_stmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm1)
            )
        );
    }
    test_field___fpu_stmm1();
    fn test_field___fpu_stmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm2)
            )
        );
    }
    test_field___fpu_stmm2();
    fn test_field___fpu_stmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm3)
            )
        );
    }
    test_field___fpu_stmm3();
    fn test_field___fpu_stmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm4)
            )
        );
    }
    test_field___fpu_stmm4();
    fn test_field___fpu_stmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm5)
            )
        );
    }
    test_field___fpu_stmm5();
    fn test_field___fpu_stmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm6)
            )
        );
    }
    test_field___fpu_stmm6();
    fn test_field___fpu_stmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_stmm7)
            )
        );
    }
    test_field___fpu_stmm7();
    fn test_field___fpu_xmm0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm0)
            )
        );
    }
    test_field___fpu_xmm0();
    fn test_field___fpu_xmm1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm1)
            )
        );
    }
    test_field___fpu_xmm1();
    fn test_field___fpu_xmm2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm2)
            )
        );
    }
    test_field___fpu_xmm2();
    fn test_field___fpu_xmm3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm3)
            )
        );
    }
    test_field___fpu_xmm3();
    fn test_field___fpu_xmm4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm4)
            )
        );
    }
    test_field___fpu_xmm4();
    fn test_field___fpu_xmm5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm5)
            )
        );
    }
    test_field___fpu_xmm5();
    fn test_field___fpu_xmm6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm6)
            )
        );
    }
    test_field___fpu_xmm6();
    fn test_field___fpu_xmm7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm7)
            )
        );
    }
    test_field___fpu_xmm7();
    fn test_field___fpu_xmm8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm8)
            )
        );
    }
    test_field___fpu_xmm8();
    fn test_field___fpu_xmm9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm9)
            )
        );
    }
    test_field___fpu_xmm9();
    fn test_field___fpu_xmm10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm10)
            )
        );
    }
    test_field___fpu_xmm10();
    fn test_field___fpu_xmm11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm11)
            )
        );
    }
    test_field___fpu_xmm11();
    fn test_field___fpu_xmm12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm12)
            )
        );
    }
    test_field___fpu_xmm12();
    fn test_field___fpu_xmm13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm13)
            )
        );
    }
    test_field___fpu_xmm13();
    fn test_field___fpu_xmm14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm14)
            )
        );
    }
    test_field___fpu_xmm14();
    fn test_field___fpu_xmm15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_xmm15)
            )
        );
    }
    test_field___fpu_xmm15();
    fn test_field___fpu_rsrv4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_rsrv4)
            )
        );
    }
    test_field___fpu_rsrv4();
    fn test_field___fpu_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_reserved1)
            )
        );
    }
    test_field___fpu_reserved1();
    fn test_field___avx_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__avx_reserved1)
            )
        );
    }
    test_field___avx_reserved1();
    fn test_field___fpu_ymmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize
            },
            588usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh0)
            )
        );
    }
    test_field___fpu_ymmh0();
    fn test_field___fpu_ymmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize
            },
            604usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh1)
            )
        );
    }
    test_field___fpu_ymmh1();
    fn test_field___fpu_ymmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize
            },
            620usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh2)
            )
        );
    }
    test_field___fpu_ymmh2();
    fn test_field___fpu_ymmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh3)
            )
        );
    }
    test_field___fpu_ymmh3();
    fn test_field___fpu_ymmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh4)
            )
        );
    }
    test_field___fpu_ymmh4();
    fn test_field___fpu_ymmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh5)
            )
        );
    }
    test_field___fpu_ymmh5();
    fn test_field___fpu_ymmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh6)
            )
        );
    }
    test_field___fpu_ymmh6();
    fn test_field___fpu_ymmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize
            },
            700usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh7)
            )
        );
    }
    test_field___fpu_ymmh7();
    fn test_field___fpu_ymmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh8)
            )
        );
    }
    test_field___fpu_ymmh8();
    fn test_field___fpu_ymmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize
            },
            732usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh9)
            )
        );
    }
    test_field___fpu_ymmh9();
    fn test_field___fpu_ymmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize
            },
            748usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh10)
            )
        );
    }
    test_field___fpu_ymmh10();
    fn test_field___fpu_ymmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize
            },
            764usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh11)
            )
        );
    }
    test_field___fpu_ymmh11();
    fn test_field___fpu_ymmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize
            },
            780usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh12)
            )
        );
    }
    test_field___fpu_ymmh12();
    fn test_field___fpu_ymmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize
            },
            796usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh13)
            )
        );
    }
    test_field___fpu_ymmh13();
    fn test_field___fpu_ymmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize
            },
            812usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh14)
            )
        );
    }
    test_field___fpu_ymmh14();
    fn test_field___fpu_ymmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize
            },
            828usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_ymmh15)
            )
        );
    }
    test_field___fpu_ymmh15();
    fn test_field___fpu_k0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize
            },
            844usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k0)
            )
        );
    }
    test_field___fpu_k0();
    fn test_field___fpu_k1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize
            },
            852usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k1)
            )
        );
    }
    test_field___fpu_k1();
    fn test_field___fpu_k2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize
            },
            860usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k2)
            )
        );
    }
    test_field___fpu_k2();
    fn test_field___fpu_k3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize
            },
            868usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k3)
            )
        );
    }
    test_field___fpu_k3();
    fn test_field___fpu_k4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize
            },
            876usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k4)
            )
        );
    }
    test_field___fpu_k4();
    fn test_field___fpu_k5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize
            },
            884usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k5)
            )
        );
    }
    test_field___fpu_k5();
    fn test_field___fpu_k6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize
            },
            892usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k6)
            )
        );
    }
    test_field___fpu_k6();
    fn test_field___fpu_k7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize
            },
            900usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_k7)
            )
        );
    }
    test_field___fpu_k7();
    fn test_field___fpu_zmmh0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize
            },
            908usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh0)
            )
        );
    }
    test_field___fpu_zmmh0();
    fn test_field___fpu_zmmh1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize
            },
            940usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh1)
            )
        );
    }
    test_field___fpu_zmmh1();
    fn test_field___fpu_zmmh2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize
            },
            972usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh2)
            )
        );
    }
    test_field___fpu_zmmh2();
    fn test_field___fpu_zmmh3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize
            },
            1004usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh3)
            )
        );
    }
    test_field___fpu_zmmh3();
    fn test_field___fpu_zmmh4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize
            },
            1036usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh4)
            )
        );
    }
    test_field___fpu_zmmh4();
    fn test_field___fpu_zmmh5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize
            },
            1068usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh5)
            )
        );
    }
    test_field___fpu_zmmh5();
    fn test_field___fpu_zmmh6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize
            },
            1100usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh6)
            )
        );
    }
    test_field___fpu_zmmh6();
    fn test_field___fpu_zmmh7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize
            },
            1132usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh7)
            )
        );
    }
    test_field___fpu_zmmh7();
    fn test_field___fpu_zmmh8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh8) as usize - ptr as usize
            },
            1164usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh8)
            )
        );
    }
    test_field___fpu_zmmh8();
    fn test_field___fpu_zmmh9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh9) as usize - ptr as usize
            },
            1196usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh9)
            )
        );
    }
    test_field___fpu_zmmh9();
    fn test_field___fpu_zmmh10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh10) as usize - ptr as usize
            },
            1228usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh10)
            )
        );
    }
    test_field___fpu_zmmh10();
    fn test_field___fpu_zmmh11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh11) as usize - ptr as usize
            },
            1260usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh11)
            )
        );
    }
    test_field___fpu_zmmh11();
    fn test_field___fpu_zmmh12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh12) as usize - ptr as usize
            },
            1292usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh12)
            )
        );
    }
    test_field___fpu_zmmh12();
    fn test_field___fpu_zmmh13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh13) as usize - ptr as usize
            },
            1324usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh13)
            )
        );
    }
    test_field___fpu_zmmh13();
    fn test_field___fpu_zmmh14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh14) as usize - ptr as usize
            },
            1356usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh14)
            )
        );
    }
    test_field___fpu_zmmh14();
    fn test_field___fpu_zmmh15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmmh15) as usize - ptr as usize
            },
            1388usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmmh15)
            )
        );
    }
    test_field___fpu_zmmh15();
    fn test_field___fpu_zmm16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm16) as usize - ptr as usize
            },
            1420usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm16)
            )
        );
    }
    test_field___fpu_zmm16();
    fn test_field___fpu_zmm17() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm17) as usize - ptr as usize
            },
            1484usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm17)
            )
        );
    }
    test_field___fpu_zmm17();
    fn test_field___fpu_zmm18() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm18) as usize - ptr as usize
            },
            1548usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm18)
            )
        );
    }
    test_field___fpu_zmm18();
    fn test_field___fpu_zmm19() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm19) as usize - ptr as usize
            },
            1612usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm19)
            )
        );
    }
    test_field___fpu_zmm19();
    fn test_field___fpu_zmm20() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm20) as usize - ptr as usize
            },
            1676usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm20)
            )
        );
    }
    test_field___fpu_zmm20();
    fn test_field___fpu_zmm21() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm21) as usize - ptr as usize
            },
            1740usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm21)
            )
        );
    }
    test_field___fpu_zmm21();
    fn test_field___fpu_zmm22() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm22) as usize - ptr as usize
            },
            1804usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm22)
            )
        );
    }
    test_field___fpu_zmm22();
    fn test_field___fpu_zmm23() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm23) as usize - ptr as usize
            },
            1868usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm23)
            )
        );
    }
    test_field___fpu_zmm23();
    fn test_field___fpu_zmm24() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm24) as usize - ptr as usize
            },
            1932usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm24)
            )
        );
    }
    test_field___fpu_zmm24();
    fn test_field___fpu_zmm25() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm25) as usize - ptr as usize
            },
            1996usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm25)
            )
        );
    }
    test_field___fpu_zmm25();
    fn test_field___fpu_zmm26() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm26) as usize - ptr as usize
            },
            2060usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm26)
            )
        );
    }
    test_field___fpu_zmm26();
    fn test_field___fpu_zmm27() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm27) as usize - ptr as usize
            },
            2124usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm27)
            )
        );
    }
    test_field___fpu_zmm27();
    fn test_field___fpu_zmm28() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm28) as usize - ptr as usize
            },
            2188usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm28)
            )
        );
    }
    test_field___fpu_zmm28();
    fn test_field___fpu_zmm29() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm29) as usize - ptr as usize
            },
            2252usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm29)
            )
        );
    }
    test_field___fpu_zmm29();
    fn test_field___fpu_zmm30() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm30) as usize - ptr as usize
            },
            2316usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm30)
            )
        );
    }
    test_field___fpu_zmm30();
    fn test_field___fpu_zmm31() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_avx512_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fpu_zmm31) as usize - ptr as usize
            },
            2380usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_avx512_state64),
                "::",
                stringify!(__fpu_zmm31)
            )
        );
    }
    test_field___fpu_zmm31();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    fn test_field___trapno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__trapno)
            )
        );
    }
    test_field___trapno();
    fn test_field___cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__cpu)
            )
        );
    }
    test_field___cpu();
    fn test_field___err() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__err)
            )
        );
    }
    test_field___err();
    fn test_field___faultvaddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_exception_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_exception_state64),
                "::",
                stringify!(__faultvaddr)
            )
        );
    }
    test_field___faultvaddr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    fn test_field___dr0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr0)
            )
        );
    }
    test_field___dr0();
    fn test_field___dr1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr1)
            )
        );
    }
    test_field___dr1();
    fn test_field___dr2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr2)
            )
        );
    }
    test_field___dr2();
    fn test_field___dr3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr3)
            )
        );
    }
    test_field___dr3();
    fn test_field___dr4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr4)
            )
        );
    }
    test_field___dr4();
    fn test_field___dr5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr5)
            )
        );
    }
    test_field___dr5();
    fn test_field___dr6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr6)
            )
        );
    }
    test_field___dr6();
    fn test_field___dr7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_debug_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_debug_state64),
                "::",
                stringify!(__dr7)
            )
        );
    }
    test_field___dr7();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    fn test_field___ctrs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_x86_cpmu_state64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_x86_cpmu_state64),
                "::",
                stringify!(__ctrs)
            )
        );
    }
    test_field___ctrs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_32),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64_full>(),
        744usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64_full))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64_full>(),
        1064usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64_full))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64_full>(),
        2664usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64_full>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_mcontext_avx512_64_full)
        )
    );
    fn test_field___es() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__es)
            )
        );
    }
    test_field___es();
    fn test_field___ss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__ss)
            )
        );
    }
    test_field___ss();
    fn test_field___fs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_mcontext_avx512_64_full>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_mcontext_avx512_64_full),
                "::",
                stringify!(__fs)
            )
        );
    }
    test_field___fs();
}
pub type mcontext_t = *mut __darwin_mcontext64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    fn test_field_ss_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_sp)
            )
        );
    }
    test_field_ss_sp();
    fn test_field_ss_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_size)
            )
        );
    }
    test_field_ss_size();
    fn test_field_ss_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_sigaltstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_sigaltstack),
                "::",
                stringify!(ss_flags)
            )
        );
    }
    test_field_ss_flags();
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    fn test_field_uc_onstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_onstack) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_onstack)
            )
        );
    }
    test_field_uc_onstack();
    fn test_field_uc_sigmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_sigmask)
            )
        );
    }
    test_field_uc_sigmask();
    fn test_field_uc_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_stack)
            )
        );
    }
    test_field_uc_stack();
    fn test_field_uc_link() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_link)
            )
        );
    }
    test_field_uc_link();
    fn test_field_uc_mcsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_mcsize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_mcsize)
            )
        );
    }
    test_field_uc_mcsize();
    fn test_field_uc_mcontext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_ucontext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_ucontext),
                "::",
                stringify!(uc_mcontext)
            )
        );
    }
    test_field_uc_mcontext();
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    fn test_field_sival_int() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigval),
                "::",
                stringify!(sival_int)
            )
        );
    }
    test_field_sival_int();
    fn test_field_sival_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigval),
                "::",
                stringify!(sival_ptr)
            )
        );
    }
    test_field_sival_ptr();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    fn test_field_sigev_notify() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify)
            )
        );
    }
    test_field_sigev_notify();
    fn test_field_sigev_signo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_signo)
            )
        );
    }
    test_field_sigev_signo();
    fn test_field_sigev_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_value)
            )
        );
    }
    test_field_sigev_value();
    fn test_field_sigev_notify_function() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify_function) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify_function)
            )
        );
    }
    test_field_sigev_notify_function();
    fn test_field_sigev_notify_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sigevent),
                "::",
                stringify!(sigev_notify_attributes)
            )
        );
    }
    test_field_sigev_notify_attributes();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    fn test_field_si_signo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_signo)
            )
        );
    }
    test_field_si_signo();
    fn test_field_si_errno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_errno)
            )
        );
    }
    test_field_si_errno();
    fn test_field_si_code() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_code)
            )
        );
    }
    test_field_si_code();
    fn test_field_si_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_pid)
            )
        );
    }
    test_field_si_pid();
    fn test_field_si_uid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_uid)
            )
        );
    }
    test_field_si_uid();
    fn test_field_si_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_status)
            )
        );
    }
    test_field_si_status();
    fn test_field_si_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_addr)
            )
        );
    }
    test_field_si_addr();
    fn test_field_si_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_value) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_value)
            )
        );
    }
    test_field_si_value();
    fn test_field_si_band() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(si_band)
            )
        );
    }
    test_field_si_band();
    fn test_field___pad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__siginfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__siginfo),
                "::",
                stringify!(__pad)
            )
        );
    }
    test_field___pad();
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    fn test_field___sa_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction_u>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sa_handler) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction_u),
                "::",
                stringify!(__sa_handler)
            )
        );
    }
    test_field___sa_handler();
    fn test_field___sa_sigaction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction_u>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sa_sigaction) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction_u),
                "::",
                stringify!(__sa_sigaction)
            )
        );
    }
    test_field___sa_sigaction();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    fn test_field___sigaction_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(__sigaction_u)
            )
        );
    }
    test_field___sigaction_u();
    fn test_field_sa_tramp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_tramp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_tramp)
            )
        );
    }
    test_field_sa_tramp();
    fn test_field_sa_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_mask)
            )
        );
    }
    test_field_sa_mask();
    fn test_field_sa_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigaction),
                "::",
                stringify!(sa_flags)
            )
        );
    }
    test_field_sa_flags();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    fn test_field___sigaction_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(__sigaction_u)
            )
        );
    }
    test_field___sigaction_u();
    fn test_field_sa_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_mask)
            )
        );
    }
    test_field_sa_mask();
    fn test_field_sa_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigaction>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(sigaction),
                "::",
                stringify!(sa_flags)
            )
        );
    }
    test_field_sa_flags();
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    fn test_field_sv_handler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_handler) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_handler)
            )
        );
    }
    test_field_sv_handler();
    fn test_field_sv_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_mask)
            )
        );
    }
    test_field_sv_mask();
    fn test_field_sv_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigvec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sv_flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(sigvec),
                "::",
                stringify!(sv_flags)
            )
        );
    }
    test_field_sv_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    fn test_field_ss_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sigstack),
                "::",
                stringify!(ss_sp)
            )
        );
    }
    test_field_ss_sp();
    fn test_field_ss_onstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sigstack>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sigstack),
                "::",
                stringify!(ss_onstack)
            )
        );
    }
    test_field_ss_onstack();
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type au_id_t = uid_t;
pub type au_asid_t = pid_t;
pub type au_event_t = u_int16_t;
pub type au_emod_t = u_int16_t;
pub type au_class_t = u_int32_t;
pub type au_asflgs_t = u_int64_t;
pub type au_ctlmode_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid {
    pub port: dev_t,
    pub machine: u_int32_t,
}
#[test]
fn bindgen_test_layout_au_tid() {
    assert_eq!(
        ::std::mem::size_of::<au_tid>(),
        8usize,
        concat!("Size of: ", stringify!(au_tid))
    );
    assert_eq!(
        ::std::mem::align_of::<au_tid>(),
        4usize,
        concat!("Alignment of ", stringify!(au_tid))
    );
    fn test_field_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_tid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(au_tid),
                "::",
                stringify!(port)
            )
        );
    }
    test_field_port();
    fn test_field_machine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_tid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).machine) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(au_tid),
                "::",
                stringify!(machine)
            )
        );
    }
    test_field_machine();
}
pub type au_tid_t = au_tid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid_addr {
    pub at_port: dev_t,
    pub at_type: u_int32_t,
    pub at_addr: [u_int32_t; 4usize],
}
#[test]
fn bindgen_test_layout_au_tid_addr() {
    assert_eq!(
        ::std::mem::size_of::<au_tid_addr>(),
        24usize,
        concat!("Size of: ", stringify!(au_tid_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<au_tid_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(au_tid_addr))
    );
    fn test_field_at_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_tid_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).at_port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(au_tid_addr),
                "::",
                stringify!(at_port)
            )
        );
    }
    test_field_at_port();
    fn test_field_at_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_tid_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).at_type) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(au_tid_addr),
                "::",
                stringify!(at_type)
            )
        );
    }
    test_field_at_type();
    fn test_field_at_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_tid_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).at_addr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(au_tid_addr),
                "::",
                stringify!(at_addr)
            )
        );
    }
    test_field_at_addr();
}
pub type au_tid_addr_t = au_tid_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_mask {
    pub am_success: ::std::os::raw::c_uint,
    pub am_failure: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_au_mask() {
    assert_eq!(
        ::std::mem::size_of::<au_mask>(),
        8usize,
        concat!("Size of: ", stringify!(au_mask))
    );
    assert_eq!(
        ::std::mem::align_of::<au_mask>(),
        4usize,
        concat!("Alignment of ", stringify!(au_mask))
    );
    fn test_field_am_success() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_mask>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).am_success) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(au_mask),
                "::",
                stringify!(am_success)
            )
        );
    }
    test_field_am_success();
    fn test_field_am_failure() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_mask>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).am_failure) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(au_mask),
                "::",
                stringify!(am_failure)
            )
        );
    }
    test_field_am_failure();
}
pub type au_mask_t = au_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_t,
    pub ai_asid: au_asid_t,
}
#[test]
fn bindgen_test_layout_auditinfo() {
    assert_eq!(
        ::std::mem::size_of::<auditinfo>(),
        24usize,
        concat!("Size of: ", stringify!(auditinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<auditinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(auditinfo))
    );
    fn test_field_ai_auid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_auid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo),
                "::",
                stringify!(ai_auid)
            )
        );
    }
    test_field_ai_auid();
    fn test_field_ai_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_mask) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo),
                "::",
                stringify!(ai_mask)
            )
        );
    }
    test_field_ai_mask();
    fn test_field_ai_termid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_termid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo),
                "::",
                stringify!(ai_termid)
            )
        );
    }
    test_field_ai_termid();
    fn test_field_ai_asid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_asid) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo),
                "::",
                stringify!(ai_asid)
            )
        );
    }
    test_field_ai_asid();
}
pub type auditinfo_t = auditinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo_addr {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_addr_t,
    pub ai_asid: au_asid_t,
    pub ai_flags: au_asflgs_t,
}
#[test]
fn bindgen_test_layout_auditinfo_addr() {
    assert_eq!(
        ::std::mem::size_of::<auditinfo_addr>(),
        48usize,
        concat!("Size of: ", stringify!(auditinfo_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<auditinfo_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(auditinfo_addr))
    );
    fn test_field_ai_auid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_auid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo_addr),
                "::",
                stringify!(ai_auid)
            )
        );
    }
    test_field_ai_auid();
    fn test_field_ai_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_mask) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo_addr),
                "::",
                stringify!(ai_mask)
            )
        );
    }
    test_field_ai_mask();
    fn test_field_ai_termid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_termid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo_addr),
                "::",
                stringify!(ai_termid)
            )
        );
    }
    test_field_ai_termid();
    fn test_field_ai_asid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_asid) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo_addr),
                "::",
                stringify!(ai_asid)
            )
        );
    }
    test_field_ai_asid();
    fn test_field_ai_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ai_flags) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(auditinfo_addr),
                "::",
                stringify!(ai_flags)
            )
        );
    }
    test_field_ai_flags();
}
pub type auditinfo_addr_t = auditinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_t,
    pub ap_asid: au_asid_t,
}
#[test]
fn bindgen_test_layout_auditpinfo() {
    assert_eq!(
        ::std::mem::size_of::<auditpinfo>(),
        28usize,
        concat!("Size of: ", stringify!(auditpinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<auditpinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(auditpinfo))
    );
    fn test_field_ap_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_pid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo),
                "::",
                stringify!(ap_pid)
            )
        );
    }
    test_field_ap_pid();
    fn test_field_ap_auid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_auid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo),
                "::",
                stringify!(ap_auid)
            )
        );
    }
    test_field_ap_auid();
    fn test_field_ap_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo),
                "::",
                stringify!(ap_mask)
            )
        );
    }
    test_field_ap_mask();
    fn test_field_ap_termid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_termid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo),
                "::",
                stringify!(ap_termid)
            )
        );
    }
    test_field_ap_termid();
    fn test_field_ap_asid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_asid) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo),
                "::",
                stringify!(ap_asid)
            )
        );
    }
    test_field_ap_asid();
}
pub type auditpinfo_t = auditpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo_addr {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_addr_t,
    pub ap_asid: au_asid_t,
    pub ap_flags: au_asflgs_t,
}
#[test]
fn bindgen_test_layout_auditpinfo_addr() {
    assert_eq!(
        ::std::mem::size_of::<auditpinfo_addr>(),
        56usize,
        concat!("Size of: ", stringify!(auditpinfo_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<auditpinfo_addr>(),
        8usize,
        concat!("Alignment of ", stringify!(auditpinfo_addr))
    );
    fn test_field_ap_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_pid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo_addr),
                "::",
                stringify!(ap_pid)
            )
        );
    }
    test_field_ap_pid();
    fn test_field_ap_auid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_auid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo_addr),
                "::",
                stringify!(ap_auid)
            )
        );
    }
    test_field_ap_auid();
    fn test_field_ap_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo_addr),
                "::",
                stringify!(ap_mask)
            )
        );
    }
    test_field_ap_mask();
    fn test_field_ap_termid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_termid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo_addr),
                "::",
                stringify!(ap_termid)
            )
        );
    }
    test_field_ap_termid();
    fn test_field_ap_asid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_asid) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo_addr),
                "::",
                stringify!(ap_asid)
            )
        );
    }
    test_field_ap_asid();
    fn test_field_ap_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<auditpinfo_addr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ap_flags) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(auditpinfo_addr),
                "::",
                stringify!(ap_flags)
            )
        );
    }
    test_field_ap_flags();
}
pub type auditpinfo_addr_t = auditpinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_session {
    pub as_aia_p: *mut auditinfo_addr_t,
    pub as_mask: au_mask_t,
}
#[test]
fn bindgen_test_layout_au_session() {
    assert_eq!(
        ::std::mem::size_of::<au_session>(),
        16usize,
        concat!("Size of: ", stringify!(au_session))
    );
    assert_eq!(
        ::std::mem::align_of::<au_session>(),
        8usize,
        concat!("Alignment of ", stringify!(au_session))
    );
    fn test_field_as_aia_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_session>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_aia_p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(au_session),
                "::",
                stringify!(as_aia_p)
            )
        );
    }
    test_field_as_aia_p();
    fn test_field_as_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_session>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(au_session),
                "::",
                stringify!(as_mask)
            )
        );
    }
    test_field_as_mask();
}
pub type au_session_t = au_session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_expire_after {
    pub age: time_t,
    pub size: size_t,
    pub op_type: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_au_expire_after() {
    assert_eq!(
        ::std::mem::size_of::<au_expire_after>(),
        24usize,
        concat!("Size of: ", stringify!(au_expire_after))
    );
    assert_eq!(
        ::std::mem::align_of::<au_expire_after>(),
        8usize,
        concat!("Alignment of ", stringify!(au_expire_after))
    );
    fn test_field_age() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_expire_after>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).age) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(au_expire_after),
                "::",
                stringify!(age)
            )
        );
    }
    test_field_age();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_expire_after>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(au_expire_after),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_op_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_expire_after>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).op_type) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(au_expire_after),
                "::",
                stringify!(op_type)
            )
        );
    }
    test_field_op_type();
}
pub type au_expire_after_t = au_expire_after;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token {
    _unused: [u8; 0],
}
pub type token_t = au_token;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_qctrl {
    pub aq_hiwater: ::std::os::raw::c_int,
    pub aq_lowater: ::std::os::raw::c_int,
    pub aq_bufsz: ::std::os::raw::c_int,
    pub aq_delay: ::std::os::raw::c_int,
    pub aq_minfree: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_au_qctrl() {
    assert_eq!(
        ::std::mem::size_of::<au_qctrl>(),
        20usize,
        concat!("Size of: ", stringify!(au_qctrl))
    );
    assert_eq!(
        ::std::mem::align_of::<au_qctrl>(),
        4usize,
        concat!("Alignment of ", stringify!(au_qctrl))
    );
    fn test_field_aq_hiwater() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_qctrl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aq_hiwater) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(au_qctrl),
                "::",
                stringify!(aq_hiwater)
            )
        );
    }
    test_field_aq_hiwater();
    fn test_field_aq_lowater() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_qctrl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aq_lowater) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(au_qctrl),
                "::",
                stringify!(aq_lowater)
            )
        );
    }
    test_field_aq_lowater();
    fn test_field_aq_bufsz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_qctrl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aq_bufsz) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(au_qctrl),
                "::",
                stringify!(aq_bufsz)
            )
        );
    }
    test_field_aq_bufsz();
    fn test_field_aq_delay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_qctrl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aq_delay) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(au_qctrl),
                "::",
                stringify!(aq_delay)
            )
        );
    }
    test_field_aq_delay();
    fn test_field_aq_minfree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_qctrl>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aq_minfree) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(au_qctrl),
                "::",
                stringify!(aq_minfree)
            )
        );
    }
    test_field_aq_minfree();
}
pub type au_qctrl_t = au_qctrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_stat {
    pub as_version: ::std::os::raw::c_uint,
    pub as_numevent: ::std::os::raw::c_uint,
    pub as_generated: ::std::os::raw::c_int,
    pub as_nonattrib: ::std::os::raw::c_int,
    pub as_kernel: ::std::os::raw::c_int,
    pub as_audit: ::std::os::raw::c_int,
    pub as_auditctl: ::std::os::raw::c_int,
    pub as_enqueue: ::std::os::raw::c_int,
    pub as_written: ::std::os::raw::c_int,
    pub as_wblocked: ::std::os::raw::c_int,
    pub as_rblocked: ::std::os::raw::c_int,
    pub as_dropped: ::std::os::raw::c_int,
    pub as_totalsize: ::std::os::raw::c_int,
    pub as_memused: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_audit_stat() {
    assert_eq!(
        ::std::mem::size_of::<audit_stat>(),
        56usize,
        concat!("Size of: ", stringify!(audit_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_stat>(),
        4usize,
        concat!("Alignment of ", stringify!(audit_stat))
    );
    fn test_field_as_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_version)
            )
        );
    }
    test_field_as_version();
    fn test_field_as_numevent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_numevent) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_numevent)
            )
        );
    }
    test_field_as_numevent();
    fn test_field_as_generated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_generated) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_generated)
            )
        );
    }
    test_field_as_generated();
    fn test_field_as_nonattrib() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_nonattrib) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_nonattrib)
            )
        );
    }
    test_field_as_nonattrib();
    fn test_field_as_kernel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_kernel) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_kernel)
            )
        );
    }
    test_field_as_kernel();
    fn test_field_as_audit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_audit) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_audit)
            )
        );
    }
    test_field_as_audit();
    fn test_field_as_auditctl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_auditctl) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_auditctl)
            )
        );
    }
    test_field_as_auditctl();
    fn test_field_as_enqueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_enqueue) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_enqueue)
            )
        );
    }
    test_field_as_enqueue();
    fn test_field_as_written() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_written) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_written)
            )
        );
    }
    test_field_as_written();
    fn test_field_as_wblocked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_wblocked) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_wblocked)
            )
        );
    }
    test_field_as_wblocked();
    fn test_field_as_rblocked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_rblocked) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_rblocked)
            )
        );
    }
    test_field_as_rblocked();
    fn test_field_as_dropped() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_dropped) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_dropped)
            )
        );
    }
    test_field_as_dropped();
    fn test_field_as_totalsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_totalsize) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_totalsize)
            )
        );
    }
    test_field_as_totalsize();
    fn test_field_as_memused() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_stat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_memused) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_stat),
                "::",
                stringify!(as_memused)
            )
        );
    }
    test_field_as_memused();
}
pub type au_stat_t = audit_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_fstat {
    pub af_filesz: u_int64_t,
    pub af_currsz: u_int64_t,
}
#[test]
fn bindgen_test_layout_audit_fstat() {
    assert_eq!(
        ::std::mem::size_of::<audit_fstat>(),
        16usize,
        concat!("Size of: ", stringify!(audit_fstat))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_fstat>(),
        8usize,
        concat!("Alignment of ", stringify!(audit_fstat))
    );
    fn test_field_af_filesz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_fstat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).af_filesz) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_fstat),
                "::",
                stringify!(af_filesz)
            )
        );
    }
    test_field_af_filesz();
    fn test_field_af_currsz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<audit_fstat>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).af_currsz) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(audit_fstat),
                "::",
                stringify!(af_currsz)
            )
        );
    }
    test_field_af_currsz();
}
pub type au_fstat_t = audit_fstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_evclass_map {
    pub ec_number: au_event_t,
    pub ec_class: au_class_t,
}
#[test]
fn bindgen_test_layout_au_evclass_map() {
    assert_eq!(
        ::std::mem::size_of::<au_evclass_map>(),
        8usize,
        concat!("Size of: ", stringify!(au_evclass_map))
    );
    assert_eq!(
        ::std::mem::align_of::<au_evclass_map>(),
        4usize,
        concat!("Alignment of ", stringify!(au_evclass_map))
    );
    fn test_field_ec_number() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_evclass_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ec_number) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(au_evclass_map),
                "::",
                stringify!(ec_number)
            )
        );
    }
    test_field_ec_number();
    fn test_field_ec_class() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<au_evclass_map>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ec_class) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(au_evclass_map),
                "::",
                stringify!(ec_class)
            )
        );
    }
    test_field_ec_class();
}
pub type au_evclass_map_t = au_evclass_map;
extern "C" {
    pub fn audit(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditon(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditctl(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauid(arg1: *mut au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauid(arg1: *const au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit_addr(
        arg1: *mut auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit_addr(
        arg1: *const auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit(arg1: *mut auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit(arg1: *const auditinfo) -> ::std::os::raw::c_int;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type boolean_t = ::std::os::raw::c_uint;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_status() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_status>(),
        40usize,
        concat!("Size of: ", stringify!(mach_port_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_status>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_status))
    );
    fn test_field_mps_pset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_pset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_pset)
            )
        );
    }
    test_field_mps_pset();
    fn test_field_mps_seqno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_seqno) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_seqno)
            )
        );
    }
    test_field_mps_seqno();
    fn test_field_mps_mscount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_mscount) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_mscount)
            )
        );
    }
    test_field_mps_mscount();
    fn test_field_mps_qlimit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_qlimit) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_qlimit)
            )
        );
    }
    test_field_mps_qlimit();
    fn test_field_mps_msgcount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_msgcount) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_msgcount)
            )
        );
    }
    test_field_mps_msgcount();
    fn test_field_mps_sorights() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_sorights) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_sorights)
            )
        );
    }
    test_field_mps_sorights();
    fn test_field_mps_srights() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_srights) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_srights)
            )
        );
    }
    test_field_mps_srights();
    fn test_field_mps_pdrequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_pdrequest) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_pdrequest)
            )
        );
    }
    test_field_mps_pdrequest();
    fn test_field_mps_nsrequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_nsrequest) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_nsrequest)
            )
        );
    }
    test_field_mps_nsrequest();
    fn test_field_mps_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_status>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mps_flags) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_status),
                "::",
                stringify!(mps_flags)
            )
        );
    }
    test_field_mps_flags();
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[test]
fn bindgen_test_layout_mach_port_limits() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_limits>(),
        4usize,
        concat!("Size of: ", stringify!(mach_port_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_limits))
    );
    fn test_field_mpl_qlimit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_limits>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mpl_qlimit) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_limits),
                "::",
                stringify!(mpl_qlimit)
            )
        );
    }
    test_field_mpl_qlimit();
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_mach_port_info_ext() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_info_ext>(),
        68usize,
        concat!("Size of: ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_info_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_info_ext))
    );
    fn test_field_mpie_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_info_ext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mpie_status) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_info_ext),
                "::",
                stringify!(mpie_status)
            )
        );
    }
    test_field_mpie_status();
    fn test_field_mpie_boost_cnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_info_ext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mpie_boost_cnt) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_info_ext),
                "::",
                stringify!(mpie_boost_cnt)
            )
        );
    }
    test_field_mpie_boost_cnt();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_info_ext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_info_ext),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[test]
fn bindgen_test_layout_mach_port_guard_info() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_guard_info>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_guard_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_guard_info))
    );
    fn test_field_mpgi_guard() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_guard_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mpgi_guard) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_guard_info),
                "::",
                stringify!(mpgi_guard)
            )
        );
    }
    test_field_mpgi_guard();
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_qos() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_qos>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_qos))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_qos>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_qos))
    );
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_qos>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_qos),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[test]
fn bindgen_test_layout_mach_service_port_info() {
    assert_eq!(
        ::std::mem::size_of::<mach_service_port_info>(),
        256usize,
        concat!("Size of: ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_service_port_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_service_port_info))
    );
    fn test_field_mspi_string_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_service_port_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mspi_string_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_service_port_info),
                "::",
                stringify!(mspi_string_name)
            )
        );
    }
    test_field_mspi_string_name();
    fn test_field_mspi_domain_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_service_port_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mspi_domain_type) as usize - ptr as usize
            },
            255usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_service_port_info),
                "::",
                stringify!(mspi_domain_type)
            )
        );
    }
    test_field_mspi_domain_type();
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_port_options__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_options__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options__bindgen_ty_1))
    );
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_options__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_options__bindgen_ty_1),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
    fn test_field_work_interval_port() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_options__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).work_interval_port) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_options__bindgen_ty_1),
                "::",
                stringify!(work_interval_port)
            )
        );
    }
    test_field_work_interval_port();
    fn test_field_service_port_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_options__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).service_port_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_options__bindgen_ty_1),
                "::",
                stringify!(service_port_info)
            )
        );
    }
    test_field_service_port_info();
    fn test_field_service_port_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_options__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).service_port_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_options__bindgen_ty_1),
                "::",
                stringify!(service_port_name)
            )
        );
    }
    test_field_service_port_name();
}
#[test]
fn bindgen_test_layout_mach_port_options() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_options>(),
        24usize,
        concat!("Size of: ", stringify!(mach_port_options))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_options>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_options),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_mpl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mach_port_options>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mpl) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mach_port_options),
                "::",
                stringify!(mpl)
            )
        );
    }
    test_field_mpl();
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
extern "C" {
    pub fn audit_session_self() -> mach_port_name_t;
}
extern "C" {
    pub fn audit_session_join(port: mach_port_name_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_session_port(
        asid: au_asid_t,
        portname: *mut mach_port_name_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct label {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cred {
    _unused: [u8; 0],
}
pub type kauth_cred_t = *mut ucred;
pub type posix_cred_t = *mut posix_cred;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xucred {
    pub cr_version: u_int,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[test]
fn bindgen_test_layout_xucred() {
    assert_eq!(
        ::std::mem::size_of::<xucred>(),
        76usize,
        concat!("Size of: ", stringify!(xucred))
    );
    assert_eq!(
        ::std::mem::align_of::<xucred>(),
        4usize,
        concat!("Alignment of ", stringify!(xucred))
    );
    fn test_field_cr_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xucred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xucred),
                "::",
                stringify!(cr_version)
            )
        );
    }
    test_field_cr_version();
    fn test_field_cr_uid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xucred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr_uid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(xucred),
                "::",
                stringify!(cr_uid)
            )
        );
    }
    test_field_cr_uid();
    fn test_field_cr_ngroups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xucred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr_ngroups) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xucred),
                "::",
                stringify!(cr_ngroups)
            )
        );
    }
    test_field_cr_ngroups();
    fn test_field_cr_groups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xucred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr_groups) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(xucred),
                "::",
                stringify!(cr_groups)
            )
        );
    }
    test_field_cr_groups();
}
extern "C" {
    #[link_name = "\u{1}_pselect$1050"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kevent {
    pub ident: usize,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: isize,
    pub udata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_kevent() {
    assert_eq!(
        ::std::mem::size_of::<kevent>(),
        32usize,
        concat!("Size of: ", stringify!(kevent))
    );
    assert_eq!(
        ::std::mem::align_of::<kevent>(),
        4usize,
        concat!("Alignment of ", stringify!(kevent))
    );
    fn test_field_ident() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ident) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent),
                "::",
                stringify!(ident)
            )
        );
    }
    test_field_ident();
    fn test_field_filter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent),
                "::",
                stringify!(filter)
            )
        );
    }
    test_field_filter();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_fflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fflags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent),
                "::",
                stringify!(fflags)
            )
        );
    }
    test_field_fflags();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_udata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).udata) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent),
                "::",
                stringify!(udata)
            )
        );
    }
    test_field_udata();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kevent64_s {
    pub ident: u64,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: i64,
    pub udata: u64,
    pub ext: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_kevent64_s() {
    assert_eq!(
        ::std::mem::size_of::<kevent64_s>(),
        48usize,
        concat!("Size of: ", stringify!(kevent64_s))
    );
    assert_eq!(
        ::std::mem::align_of::<kevent64_s>(),
        8usize,
        concat!("Alignment of ", stringify!(kevent64_s))
    );
    fn test_field_ident() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent64_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ident) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent64_s),
                "::",
                stringify!(ident)
            )
        );
    }
    test_field_ident();
    fn test_field_filter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent64_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent64_s),
                "::",
                stringify!(filter)
            )
        );
    }
    test_field_filter();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent64_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent64_s),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_fflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent64_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fflags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent64_s),
                "::",
                stringify!(fflags)
            )
        );
    }
    test_field_fflags();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent64_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent64_s),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_udata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent64_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).udata) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent64_s),
                "::",
                stringify!(udata)
            )
        );
    }
    test_field_udata();
    fn test_field_ext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kevent64_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ext) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(kevent64_s),
                "::",
                stringify!(ext)
            )
        );
    }
    test_field_ext();
}
pub const eNoteReapDeprecated: _bindgen_ty_1 = 268435456;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const eNoteExitReparentedDeprecated: _bindgen_ty_2 = 524288;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct knote {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klist {
    pub slh_first: *mut knote,
}
#[test]
fn bindgen_test_layout_klist() {
    assert_eq!(
        ::std::mem::size_of::<klist>(),
        8usize,
        concat!("Size of: ", stringify!(klist))
    );
    assert_eq!(
        ::std::mem::align_of::<klist>(),
        8usize,
        concat!("Alignment of ", stringify!(klist))
    );
    fn test_field_slh_first() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<klist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slh_first) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(klist),
                "::",
                stringify!(slh_first)
            )
        );
    }
    test_field_slh_first();
}
extern "C" {
    pub fn kqueue() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent,
        nevents: ::std::os::raw::c_int,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent64(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent64_s,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent64_s,
        nevents: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgrp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ident {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct extern_proc {
    pub p_un: extern_proc__bindgen_ty_1,
    pub p_vmspace: *mut vmspace,
    pub p_sigacts: *mut sigacts,
    pub p_flag: ::std::os::raw::c_int,
    pub p_stat: ::std::os::raw::c_char,
    pub p_pid: pid_t,
    pub p_oppid: pid_t,
    pub p_dupfd: ::std::os::raw::c_int,
    pub user_stack: caddr_t,
    pub exit_thread: *mut ::std::os::raw::c_void,
    pub p_debugger: ::std::os::raw::c_int,
    pub sigwait: boolean_t,
    pub p_estcpu: u_int,
    pub p_cpticks: ::std::os::raw::c_int,
    pub p_pctcpu: fixpt_t,
    pub p_wchan: *mut ::std::os::raw::c_void,
    pub p_wmesg: *mut ::std::os::raw::c_char,
    pub p_swtime: u_int,
    pub p_slptime: u_int,
    pub p_realtimer: itimerval,
    pub p_rtime: timeval,
    pub p_uticks: u_quad_t,
    pub p_sticks: u_quad_t,
    pub p_iticks: u_quad_t,
    pub p_traceflag: ::std::os::raw::c_int,
    pub p_tracep: *mut vnode,
    pub p_siglist: ::std::os::raw::c_int,
    pub p_textvp: *mut vnode,
    pub p_holdcnt: ::std::os::raw::c_int,
    pub p_sigmask: sigset_t,
    pub p_sigignore: sigset_t,
    pub p_sigcatch: sigset_t,
    pub p_priority: u_char,
    pub p_usrpri: u_char,
    pub p_nice: ::std::os::raw::c_char,
    pub p_comm: [::std::os::raw::c_char; 17usize],
    pub p_pgrp: *mut pgrp,
    pub p_addr: *mut user,
    pub p_xstat: u_short,
    pub p_acflag: u_short,
    pub p_ru: *mut rusage,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union extern_proc__bindgen_ty_1 {
    pub p_st1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub __p_starttime: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extern_proc__bindgen_ty_1__bindgen_ty_1 {
    pub __p_forw: *mut proc_,
    pub __p_back: *mut proc_,
}
#[test]
fn bindgen_test_layout_extern_proc__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<extern_proc__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(extern_proc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<extern_proc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(extern_proc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field___p_forw() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<extern_proc__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__p_forw) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__p_forw)
            )
        );
    }
    test_field___p_forw();
    fn test_field___p_back() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<extern_proc__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__p_back) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__p_back)
            )
        );
    }
    test_field___p_back();
}
#[test]
fn bindgen_test_layout_extern_proc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<extern_proc__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(extern_proc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<extern_proc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(extern_proc__bindgen_ty_1))
    );
    fn test_field_p_st1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_st1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc__bindgen_ty_1),
                "::",
                stringify!(p_st1)
            )
        );
    }
    test_field_p_st1();
    fn test_field___p_starttime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__p_starttime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc__bindgen_ty_1),
                "::",
                stringify!(__p_starttime)
            )
        );
    }
    test_field___p_starttime();
}
#[test]
fn bindgen_test_layout_extern_proc() {
    assert_eq!(
        ::std::mem::size_of::<extern_proc>(),
        296usize,
        concat!("Size of: ", stringify!(extern_proc))
    );
    assert_eq!(
        ::std::mem::align_of::<extern_proc>(),
        8usize,
        concat!("Alignment of ", stringify!(extern_proc))
    );
    fn test_field_p_un() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_un) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_un)
            )
        );
    }
    test_field_p_un();
    fn test_field_p_vmspace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_vmspace) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_vmspace)
            )
        );
    }
    test_field_p_vmspace();
    fn test_field_p_sigacts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_sigacts) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_sigacts)
            )
        );
    }
    test_field_p_sigacts();
    fn test_field_p_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_flag) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_flag)
            )
        );
    }
    test_field_p_flag();
    fn test_field_p_stat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_stat) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_stat)
            )
        );
    }
    test_field_p_stat();
    fn test_field_p_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_pid) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_pid)
            )
        );
    }
    test_field_p_pid();
    fn test_field_p_oppid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_oppid) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_oppid)
            )
        );
    }
    test_field_p_oppid();
    fn test_field_p_dupfd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_dupfd) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_dupfd)
            )
        );
    }
    test_field_p_dupfd();
    fn test_field_user_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_stack) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(user_stack)
            )
        );
    }
    test_field_user_stack();
    fn test_field_exit_thread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).exit_thread) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(exit_thread)
            )
        );
    }
    test_field_exit_thread();
    fn test_field_p_debugger() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_debugger) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_debugger)
            )
        );
    }
    test_field_p_debugger();
    fn test_field_sigwait() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigwait) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(sigwait)
            )
        );
    }
    test_field_sigwait();
    fn test_field_p_estcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_estcpu) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_estcpu)
            )
        );
    }
    test_field_p_estcpu();
    fn test_field_p_cpticks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_cpticks) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_cpticks)
            )
        );
    }
    test_field_p_cpticks();
    fn test_field_p_pctcpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_pctcpu) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_pctcpu)
            )
        );
    }
    test_field_p_pctcpu();
    fn test_field_p_wchan() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_wchan) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_wchan)
            )
        );
    }
    test_field_p_wchan();
    fn test_field_p_wmesg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_wmesg) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_wmesg)
            )
        );
    }
    test_field_p_wmesg();
    fn test_field_p_swtime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_swtime) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_swtime)
            )
        );
    }
    test_field_p_swtime();
    fn test_field_p_slptime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_slptime) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_slptime)
            )
        );
    }
    test_field_p_slptime();
    fn test_field_p_realtimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_realtimer) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_realtimer)
            )
        );
    }
    test_field_p_realtimer();
    fn test_field_p_rtime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_rtime) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_rtime)
            )
        );
    }
    test_field_p_rtime();
    fn test_field_p_uticks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_uticks) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_uticks)
            )
        );
    }
    test_field_p_uticks();
    fn test_field_p_sticks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_sticks) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_sticks)
            )
        );
    }
    test_field_p_sticks();
    fn test_field_p_iticks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_iticks) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_iticks)
            )
        );
    }
    test_field_p_iticks();
    fn test_field_p_traceflag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_traceflag) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_traceflag)
            )
        );
    }
    test_field_p_traceflag();
    fn test_field_p_tracep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_tracep) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_tracep)
            )
        );
    }
    test_field_p_tracep();
    fn test_field_p_siglist() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_siglist) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_siglist)
            )
        );
    }
    test_field_p_siglist();
    fn test_field_p_textvp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_textvp) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_textvp)
            )
        );
    }
    test_field_p_textvp();
    fn test_field_p_holdcnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_holdcnt) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_holdcnt)
            )
        );
    }
    test_field_p_holdcnt();
    fn test_field_p_sigmask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_sigmask) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_sigmask)
            )
        );
    }
    test_field_p_sigmask();
    fn test_field_p_sigignore() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_sigignore) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_sigignore)
            )
        );
    }
    test_field_p_sigignore();
    fn test_field_p_sigcatch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_sigcatch) as usize - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_sigcatch)
            )
        );
    }
    test_field_p_sigcatch();
    fn test_field_p_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_priority) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_priority)
            )
        );
    }
    test_field_p_priority();
    fn test_field_p_usrpri() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_usrpri) as usize - ptr as usize
            },
            241usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_usrpri)
            )
        );
    }
    test_field_p_usrpri();
    fn test_field_p_nice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_nice) as usize - ptr as usize
            },
            242usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_nice)
            )
        );
    }
    test_field_p_nice();
    fn test_field_p_comm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_comm) as usize - ptr as usize
            },
            243usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_comm)
            )
        );
    }
    test_field_p_comm();
    fn test_field_p_pgrp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_pgrp) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_pgrp)
            )
        );
    }
    test_field_p_pgrp();
    fn test_field_p_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_addr) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_addr)
            )
        );
    }
    test_field_p_addr();
    fn test_field_p_xstat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_xstat) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_xstat)
            )
        );
    }
    test_field_p_xstat();
    fn test_field_p_acflag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_acflag) as usize - ptr as usize
            },
            282usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_acflag)
            )
        );
    }
    test_field_p_acflag();
    fn test_field_p_ru() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<extern_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_ru) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(extern_proc),
                "::",
                stringify!(p_ru)
            )
        );
    }
    test_field_p_ru();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vmspace {
    pub dummy: i32,
    pub dummy2: caddr_t,
    pub dummy3: [i32; 5usize],
    pub dummy4: [caddr_t; 3usize],
}
#[test]
fn bindgen_test_layout_vmspace() {
    assert_eq!(
        ::std::mem::size_of::<vmspace>(),
        64usize,
        concat!("Size of: ", stringify!(vmspace))
    );
    assert_eq!(
        ::std::mem::align_of::<vmspace>(),
        8usize,
        concat!("Alignment of ", stringify!(vmspace))
    );
    fn test_field_dummy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vmspace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(vmspace),
                "::",
                stringify!(dummy)
            )
        );
    }
    test_field_dummy();
    fn test_field_dummy2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vmspace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(vmspace),
                "::",
                stringify!(dummy2)
            )
        );
    }
    test_field_dummy2();
    fn test_field_dummy3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vmspace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dummy3) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(vmspace),
                "::",
                stringify!(dummy3)
            )
        );
    }
    test_field_dummy3();
    fn test_field_dummy4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<vmspace>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dummy4) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(vmspace),
                "::",
                stringify!(dummy4)
            )
        );
    }
    test_field_dummy4();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlname {
    pub ctl_name: *mut ::std::os::raw::c_char,
    pub ctl_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ctlname() {
    assert_eq!(
        ::std::mem::size_of::<ctlname>(),
        16usize,
        concat!("Size of: ", stringify!(ctlname))
    );
    assert_eq!(
        ::std::mem::align_of::<ctlname>(),
        8usize,
        concat!("Alignment of ", stringify!(ctlname))
    );
    fn test_field_ctl_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ctlname>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctl_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ctlname),
                "::",
                stringify!(ctl_name)
            )
        );
    }
    test_field_ctl_name();
    fn test_field_ctl_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ctlname>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctl_type) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ctlname),
                "::",
                stringify!(ctl_type)
            )
        );
    }
    test_field_ctl_type();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pcred {
    pub pc_lock: [::std::os::raw::c_char; 72usize],
    pub pc_ucred: *mut ucred,
    pub p_ruid: uid_t,
    pub p_svuid: uid_t,
    pub p_rgid: gid_t,
    pub p_svgid: gid_t,
    pub p_refcnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__pcred() {
    assert_eq!(
        ::std::mem::size_of::<_pcred>(),
        104usize,
        concat!("Size of: ", stringify!(_pcred))
    );
    assert_eq!(
        ::std::mem::align_of::<_pcred>(),
        8usize,
        concat!("Alignment of ", stringify!(_pcred))
    );
    fn test_field_pc_lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_pcred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pc_lock) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_pcred),
                "::",
                stringify!(pc_lock)
            )
        );
    }
    test_field_pc_lock();
    fn test_field_pc_ucred() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_pcred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pc_ucred) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_pcred),
                "::",
                stringify!(pc_ucred)
            )
        );
    }
    test_field_pc_ucred();
    fn test_field_p_ruid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_pcred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_ruid) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_pcred),
                "::",
                stringify!(p_ruid)
            )
        );
    }
    test_field_p_ruid();
    fn test_field_p_svuid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_pcred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_svuid) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(_pcred),
                "::",
                stringify!(p_svuid)
            )
        );
    }
    test_field_p_svuid();
    fn test_field_p_rgid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_pcred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_rgid) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_pcred),
                "::",
                stringify!(p_rgid)
            )
        );
    }
    test_field_p_rgid();
    fn test_field_p_svgid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_pcred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_svgid) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(_pcred),
                "::",
                stringify!(p_svgid)
            )
        );
    }
    test_field_p_svgid();
    fn test_field_p_refcnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_pcred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p_refcnt) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_pcred),
                "::",
                stringify!(p_refcnt)
            )
        );
    }
    test_field_p_refcnt();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ucred {
    pub cr_ref: i32,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[test]
fn bindgen_test_layout__ucred() {
    assert_eq!(
        ::std::mem::size_of::<_ucred>(),
        76usize,
        concat!("Size of: ", stringify!(_ucred))
    );
    assert_eq!(
        ::std::mem::align_of::<_ucred>(),
        4usize,
        concat!("Alignment of ", stringify!(_ucred))
    );
    fn test_field_cr_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ucred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr_ref) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ucred),
                "::",
                stringify!(cr_ref)
            )
        );
    }
    test_field_cr_ref();
    fn test_field_cr_uid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ucred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr_uid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_ucred),
                "::",
                stringify!(cr_uid)
            )
        );
    }
    test_field_cr_uid();
    fn test_field_cr_ngroups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ucred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr_ngroups) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_ucred),
                "::",
                stringify!(cr_ngroups)
            )
        );
    }
    test_field_cr_ngroups();
    fn test_field_cr_groups() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_ucred>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cr_groups) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_ucred),
                "::",
                stringify!(cr_groups)
            )
        );
    }
    test_field_cr_groups();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kinfo_proc {
    pub kp_proc: extern_proc,
    pub kp_eproc: kinfo_proc_eproc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kinfo_proc_eproc {
    pub e_paddr: *mut proc_,
    pub e_sess: *mut session,
    pub e_pcred: _pcred,
    pub e_ucred: _ucred,
    pub e_vm: vmspace,
    pub e_ppid: pid_t,
    pub e_pgid: pid_t,
    pub e_jobc: ::std::os::raw::c_short,
    pub e_tdev: dev_t,
    pub e_tpgid: pid_t,
    pub e_tsess: *mut session,
    pub e_wmesg: [::std::os::raw::c_char; 8usize],
    pub e_xsize: segsz_t,
    pub e_xrssize: ::std::os::raw::c_short,
    pub e_xccount: ::std::os::raw::c_short,
    pub e_xswrss: ::std::os::raw::c_short,
    pub e_flag: i32,
    pub e_login: [::std::os::raw::c_char; 12usize],
    pub e_spare: [i32; 4usize],
}
#[test]
fn bindgen_test_layout_kinfo_proc_eproc() {
    assert_eq!(
        ::std::mem::size_of::<kinfo_proc_eproc>(),
        352usize,
        concat!("Size of: ", stringify!(kinfo_proc_eproc))
    );
    assert_eq!(
        ::std::mem::align_of::<kinfo_proc_eproc>(),
        8usize,
        concat!("Alignment of ", stringify!(kinfo_proc_eproc))
    );
    fn test_field_e_paddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_paddr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_paddr)
            )
        );
    }
    test_field_e_paddr();
    fn test_field_e_sess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_sess) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_sess)
            )
        );
    }
    test_field_e_sess();
    fn test_field_e_pcred() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_pcred) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_pcred)
            )
        );
    }
    test_field_e_pcred();
    fn test_field_e_ucred() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_ucred) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_ucred)
            )
        );
    }
    test_field_e_ucred();
    fn test_field_e_vm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_vm) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_vm)
            )
        );
    }
    test_field_e_vm();
    fn test_field_e_ppid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_ppid) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_ppid)
            )
        );
    }
    test_field_e_ppid();
    fn test_field_e_pgid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_pgid) as usize - ptr as usize
            },
            268usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_pgid)
            )
        );
    }
    test_field_e_pgid();
    fn test_field_e_jobc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_jobc) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_jobc)
            )
        );
    }
    test_field_e_jobc();
    fn test_field_e_tdev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_tdev) as usize - ptr as usize
            },
            276usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_tdev)
            )
        );
    }
    test_field_e_tdev();
    fn test_field_e_tpgid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_tpgid) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_tpgid)
            )
        );
    }
    test_field_e_tpgid();
    fn test_field_e_tsess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_tsess) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_tsess)
            )
        );
    }
    test_field_e_tsess();
    fn test_field_e_wmesg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_wmesg) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_wmesg)
            )
        );
    }
    test_field_e_wmesg();
    fn test_field_e_xsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_xsize) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_xsize)
            )
        );
    }
    test_field_e_xsize();
    fn test_field_e_xrssize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_xrssize) as usize - ptr as usize
            },
            308usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_xrssize)
            )
        );
    }
    test_field_e_xrssize();
    fn test_field_e_xccount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_xccount) as usize - ptr as usize
            },
            310usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_xccount)
            )
        );
    }
    test_field_e_xccount();
    fn test_field_e_xswrss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_xswrss) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_xswrss)
            )
        );
    }
    test_field_e_xswrss();
    fn test_field_e_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_flag) as usize - ptr as usize
            },
            316usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_flag)
            )
        );
    }
    test_field_e_flag();
    fn test_field_e_login() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_login) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_login)
            )
        );
    }
    test_field_e_login();
    fn test_field_e_spare() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc_eproc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e_spare) as usize - ptr as usize
            },
            332usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc_eproc),
                "::",
                stringify!(e_spare)
            )
        );
    }
    test_field_e_spare();
}
#[test]
fn bindgen_test_layout_kinfo_proc() {
    assert_eq!(
        ::std::mem::size_of::<kinfo_proc>(),
        648usize,
        concat!("Size of: ", stringify!(kinfo_proc))
    );
    assert_eq!(
        ::std::mem::align_of::<kinfo_proc>(),
        8usize,
        concat!("Alignment of ", stringify!(kinfo_proc))
    );
    fn test_field_kp_proc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kp_proc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc),
                "::",
                stringify!(kp_proc)
            )
        );
    }
    test_field_kp_proc();
    fn test_field_kp_eproc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<kinfo_proc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kp_eproc) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(kinfo_proc),
                "::",
                stringify!(kp_eproc)
            )
        );
    }
    test_field_kp_eproc();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsw_usage {
    pub xsu_total: u_int64_t,
    pub xsu_avail: u_int64_t,
    pub xsu_used: u_int64_t,
    pub xsu_pagesize: u_int32_t,
    pub xsu_encrypted: boolean_t,
}
#[test]
fn bindgen_test_layout_xsw_usage() {
    assert_eq!(
        ::std::mem::size_of::<xsw_usage>(),
        32usize,
        concat!("Size of: ", stringify!(xsw_usage))
    );
    assert_eq!(
        ::std::mem::align_of::<xsw_usage>(),
        8usize,
        concat!("Alignment of ", stringify!(xsw_usage))
    );
    fn test_field_xsu_total() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsw_usage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xsu_total) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(xsw_usage),
                "::",
                stringify!(xsu_total)
            )
        );
    }
    test_field_xsu_total();
    fn test_field_xsu_avail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsw_usage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xsu_avail) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(xsw_usage),
                "::",
                stringify!(xsu_avail)
            )
        );
    }
    test_field_xsu_avail();
    fn test_field_xsu_used() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsw_usage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xsu_used) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(xsw_usage),
                "::",
                stringify!(xsu_used)
            )
        );
    }
    test_field_xsu_used();
    fn test_field_xsu_pagesize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsw_usage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xsu_pagesize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(xsw_usage),
                "::",
                stringify!(xsu_pagesize)
            )
        );
    }
    test_field_xsu_pagesize();
    fn test_field_xsu_encrypted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<xsw_usage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xsu_encrypted) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(xsw_usage),
                "::",
                stringify!(xsu_encrypted)
            )
        );
    }
    test_field_xsu_encrypted();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loadavg {
    pub ldavg: [fixpt_t; 3usize],
    pub fscale: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_loadavg() {
    assert_eq!(
        ::std::mem::size_of::<loadavg>(),
        24usize,
        concat!("Size of: ", stringify!(loadavg))
    );
    assert_eq!(
        ::std::mem::align_of::<loadavg>(),
        8usize,
        concat!("Alignment of ", stringify!(loadavg))
    );
    fn test_field_ldavg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<loadavg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ldavg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(loadavg),
                "::",
                stringify!(ldavg)
            )
        );
    }
    test_field_ldavg();
    fn test_field_fscale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<loadavg>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fscale) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(loadavg),
                "::",
                stringify!(fscale)
            )
        );
    }
    test_field_fscale();
}
extern "C" {
    pub static mut averunnable: loadavg;
}
extern "C" {
    pub fn sysctl(
        arg1: *mut ::std::os::raw::c_int,
        arg2: u_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut size_t,
        arg5: *mut ::std::os::raw::c_void,
        arg6: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut size_t,
        arg4: *mut ::std::os::raw::c_void,
        arg5: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlnametomib(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    fn test_field_gp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
    }
    test_field_gp_offset();
    fn test_field_fp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
    }
    test_field_fp_offset();
    fn test_field_overflow_arg_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
    }
    test_field_overflow_arg_area();
    fn test_field_reg_save_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    test_field_reg_save_area();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigacts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub _address: u8,
}
